Index: include/COLLADASaxFWLDocumentProcessor.h
===================================================================
--- include/COLLADASaxFWLDocumentProcessor.h	(revision 684)
+++ include/COLLADASaxFWLDocumentProcessor.h	(working copy)
@@ -18,7 +18,9 @@
 #include "COLLADASaxFWLSidAddress.h"
 #include "COLLADASaxFWLSidTreeNode.h"
 #include "COLLADASaxFWLLoader.h"
+#include "COLLADASaxFWLExtraDataElementHandler.h"
 
+
 #include "COLLADAFWUniqueId.h"
 #include "COLLADAFWSkinController.h"
 
@@ -94,8 +96,8 @@
 		will be deleted by the FileLoader.*/
 		Loader::UniqueIdAnimationListMap& mUniqueIdAnimationListMap;
 
-		/** An unknown element handler that stores the unknown elements as raw xml data.*/
-		GeneratedSaxParser::RawUnknownElementHandler mRawUnknownElementHandler;
+        /** The handler to handle the extra data elements. */
+        ExtraDataElementHandler mExtraDataElementHandler;
 
 		/** A combination of ObjectFlags, indicating which objects should be parsed during the 
 		parse process.*/
@@ -133,7 +135,7 @@
 		DocumentProcessor ( Loader* colladaLoader, 
 			                SaxParserErrorHandler* saxParserErrorHandler, 
 			                int objectFlags,
-			                int& /*[in,out]*/ parsedObjectFlags);
+			                int& /*[in,out]*/ parsedObjectFlags );
 
         /** Destructor. */
 		virtual ~DocumentProcessor();
@@ -144,8 +146,8 @@
 		/** Returns error handler for xml parser. */
 		SaxParserErrorHandler* getErrorHandler() {return mSaxParserErrorHandler;}
 
-		/** Returns the unknown element handler that stores the unknown elements as raw xml data.*/
-		GeneratedSaxParser::RawUnknownElementHandler& getRawUnknownElementHandler() { return  mRawUnknownElementHandler; }
+        /** The handler to handle the extra data elements. */
+        ExtraDataElementHandler& getExtraDataElementHandler () { return mExtraDataElementHandler; }
 
 		/** A combination of ObjectFlags, indicating which objects should be parsed during the 
 		parse process.*/
Index: include/COLLADASaxFWLExtraDataElementHandler.h
===================================================================
--- include/COLLADASaxFWLExtraDataElementHandler.h	(revision 0)
+++ include/COLLADASaxFWLExtraDataElementHandler.h	(revision 0)
@@ -0,0 +1,67 @@
+/*
+    Copyright (c) 2008-2009 NetAllied Systems GmbH
+
+    This file is part of COLLADASaxFrameworkLoader.
+
+    Licensed under the MIT Open Source License, 
+    for details please see LICENSE file or the website
+    http://www.opensource.org/licenses/mit-license.php
+*/
+
+#ifndef __COLLADASAXFWL_EXTRADATAELEMENTHANDLER_H__
+#define __COLLADASAXFWL_EXTRADATAELEMENTHANDLER_H__
+
+#include "COLLADASaxFWLPrerequisites.h"
+#include "GeneratedSaxParserIUnknownElementHandler.h"
+
+
+namespace COLLADASaxFWL
+{
+
+    /** The element handler for the extra data preservation. */
+    class ExtraDataElementHandler : public GeneratedSaxParser::IUnknownElementHandler 
+    {
+	private:
+	
+        /** List of registered extra data callback handlers. */
+        ExtraDataCallbackHandlerList mExtraDataCallbackHandlerList;
+
+        /** Array of bool elements to store the info, if the parsing methods 
+        of the callback handlers has to be called. */
+        bool* mCallbackHandlersCallingList;
+
+	public:
+
+        /** Constructor. */
+		ExtraDataElementHandler();
+
+        /** Destructor. */
+		virtual ~ExtraDataElementHandler();
+
+        /** List of registered extra data callback handlers. */
+        void setExtraDataCallbackHandlerList ( const COLLADASaxFWL::ExtraDataCallbackHandlerList& val );
+
+        /** List of registered extra data callback handlers. */
+        const ExtraDataCallbackHandlerList& getExtraDataCallbackHandlerList () const { return mExtraDataCallbackHandlerList; }
+
+        /** Set the flag, if the callback handler on the given index position should be called. */
+        void setExtraDataCallbackHandlerCalling ( const size_t index, const bool calling );
+
+        /** Implementation of IUnknownElementHandler. */
+        virtual bool elementBegin( const ParserChar* elementName, const GeneratedSaxParser::xmlChar** attributes);
+        virtual bool elementEnd(const ParserChar* elementName);
+        virtual bool textData(const ParserChar* text, size_t textLength);
+
+	private:
+
+        /** Disable default copy ctor. */
+		ExtraDataElementHandler( const ExtraDataElementHandler& pre );
+
+        /** Disable default assignment operator. */
+		const ExtraDataElementHandler& operator= ( const ExtraDataElementHandler& pre );
+
+	};
+
+} // namespace COLLADASAXFWL
+
+#endif // __COLLADASAXFWL_EXTRADATAELEMENTHANDLER_H__
Index: include/COLLADASaxFWLExtraDataLoader.h
===================================================================
--- include/COLLADASaxFWLExtraDataLoader.h	(revision 0)
+++ include/COLLADASaxFWLExtraDataLoader.h	(revision 0)
@@ -0,0 +1,57 @@
+/*
+    Copyright (c) 2008-2009 NetAllied Systems GmbH
+
+    This file is part of COLLADASaxFrameworkLoader.
+
+    Licensed under the MIT Open Source License, 
+    for details please see LICENSE file or the website
+    http://www.opensource.org/licenses/mit-license.php
+*/
+
+#ifndef __COLLADASAXFWL_IROOTPARSER_H__
+#define __COLLADASAXFWL_IROOTPARSER_H__
+
+#include "COLLADASaxFWLPrerequisites.h"
+
+
+namespace COLLADASaxFWL
+{
+    class FileLoader;
+
+    /** Root class for the parsers. */
+	class ExtraDataLoader 	
+    {
+
+    public:
+
+        /** Constructor. */
+		ExtraDataLoader ();
+
+        /** Destructor. */
+		virtual ~ExtraDataLoader();
+
+        /** Returns a pointer to the file loader. */
+        virtual FileLoader* getFileLoader() = 0;
+
+        /** Returns a pointer to the file loader. */
+        virtual const FileLoader* getFileLoader() const = 0;
+
+        /** Starts loading an extra tag. */
+        virtual bool root__begin__technique( const technique__AttributeData& attributeData );
+
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId() { return COLLADAFW::UniqueId::INVALID; }
+
+	private:
+
+        /** Disable default copy ctor. */
+		ExtraDataLoader( const ExtraDataLoader& pre );
+
+        /** Disable default assignment operator. */
+		const ExtraDataLoader& operator= ( const ExtraDataLoader& pre );
+
+	};
+
+} // namespace COLLADASAXFWL
+
+#endif // __COLLADASAXFWL_IROOTPARSER_H__
Index: include/COLLADASaxFWLFileLoader.h
===================================================================
--- include/COLLADASaxFWLFileLoader.h	(revision 684)
+++ include/COLLADASaxFWLFileLoader.h	(working copy)
@@ -12,9 +12,7 @@
 #define __COLLADASAXFWL_FILELOADER_H__
 
 #include "COLLADASaxFWLPrerequisites.h"
-
 #include "COLLADASaxFWLDocumentProcessor.h"
-
 #include "COLLADASaxFWLColladaParserAutoGen14Private.h"
 #include "COLLADASaxFWLColladaParserAutoGen15Private.h"
 
@@ -22,8 +20,6 @@
 
 
 
-
-
 namespace COLLADASaxFWL
 {
 	class SidTreeNode;
@@ -78,7 +74,8 @@
 			         const COLLADABU::URI& fileURI, 
 					 SaxParserErrorHandler* saxParserErrorHandler, 
 					 int objectFlags,
-					 int& /*[in,out]*/ parsedObjectFlags);
+					 int& /*[in,out]*/ parsedObjectFlags, 
+                     const ExtraDataCallbackHandlerList& extraDataCallbackHandlerList );
  
         /** Destructor. */
         virtual ~FileLoader();
Index: include/COLLADASaxFWLFilePartLoader.h
===================================================================
--- include/COLLADASaxFWLFilePartLoader.h	(revision 684)
+++ include/COLLADASaxFWLFilePartLoader.h	(working copy)
@@ -23,7 +23,8 @@
 	class FilePartLoader : public IFilePartLoader
 	{
 	private:
-		IFilePartLoader* mCallingFilePartLoader;
+
+        IFilePartLoader* mCallingFilePartLoader;
 	
 	public:
 
Index: include/COLLADASaxFWLGeometryLoader.h
===================================================================
--- include/COLLADASaxFWLGeometryLoader.h	(revision 684)
+++ include/COLLADASaxFWLGeometryLoader.h	(working copy)
@@ -53,9 +53,12 @@
         /** Returns the ExtraData object, that should be used to store the extra data. */
         virtual COLLADAFW::ExtraData* getExtraData();
 
-        /** Returns the second part of the key, either camera or optics. */
-        virtual const char* getSecondKey() { return COLLADAFW::ExtraKeys::GEOMETRY; }
+        /** Returns the second part of the key. */
+        virtual const char* getSecondKey();
 
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId();
+
         /** Sets the id of the geometry.*/
 		void setGeometryId( const String& geometryId ) { mGeometryId = geometryId; }
 
@@ -69,10 +72,10 @@
 		const String& getGeometryName() const { return mGeometryName; }
 
         /** Sax callback function for the beginning of a mesh.*/
-		bool begin__mesh();
+		virtual bool begin__mesh();
 
         /** Sax callback function for the ending of a geometry.*/
-		bool end__geometry();
+		virtual bool end__geometry();
 
 	private:
 
Index: include/COLLADASaxFWLIExtraDataCallbackHandler.h
===================================================================
--- include/COLLADASaxFWLIExtraDataCallbackHandler.h	(revision 0)
+++ include/COLLADASaxFWLIExtraDataCallbackHandler.h	(revision 0)
@@ -0,0 +1,56 @@
+/*
+    Copyright (c) 2008-2009 NetAllied Systems GmbH
+
+    This file is part of COLLADASaxFrameworkLoader.
+
+    Licensed under the MIT Open Source License, 
+    for details please see LICENSE file or the website
+    http://www.opensource.org/licenses/mit-license.php
+*/
+
+#ifndef __COLLADASAXFWL_IEXTRADATACALLBACKHANDLER_H__
+#define __COLLADASAXFWL_IEXTRADATACALLBACKHANDLER_H__
+
+#include "COLLADASaxFWLPrerequisites.h"
+#include "COLLADASaxFWLXmlTypes.h"
+
+
+namespace COLLADASaxFWL
+{
+
+    /** The callback handler to handle the reading of extra data. */
+	class IExtraDataCallbackHandler 	
+    {
+	
+	public:
+
+        /** Constructor. */
+		IExtraDataCallbackHandler ();
+
+        /** Destructor. */
+		virtual ~IExtraDataCallbackHandler ();
+
+        /** The methods to get the extra data tags to the registered callback handlers. */
+        virtual bool elementBegin( const ParserChar* elementName, const GeneratedSaxParser::xmlChar** attributes) = 0;
+        virtual bool elementEnd(const ParserChar* elementName ) = 0;
+        virtual bool textData(const ParserChar* text, size_t textLength) = 0;
+
+        /** Method to ask, if the current callback handler want to read the data of the given extra element. */
+        virtual bool parseElement ( 
+            const ParserChar* profileName, 
+            const StringHash& elementHash, 
+            const COLLADAFW::UniqueId& uniqueId ) = 0;
+
+	private:
+
+        /** Disable default copy constructor. */
+		IExtraDataCallbackHandler( const IExtraDataCallbackHandler& pre );
+
+        /** Disable default assignment operator. */
+		const IExtraDataCallbackHandler& operator= ( const IExtraDataCallbackHandler& pre );
+
+	};
+
+} // namespace COLLADASAXFWL
+
+#endif // __COLLADASAXFWL_IEXTRADATACALLBACKHANDLER_H__
Index: include/COLLADASaxFWLIFilePartLoader.h
===================================================================
--- include/COLLADASaxFWLIFilePartLoader.h	(revision 684)
+++ include/COLLADASaxFWLIFilePartLoader.h	(working copy)
@@ -16,6 +16,7 @@
 #include "COLLADASaxFWLSaxFWLError.h"
 #include "COLLADASaxFWLXmlTypes.h"
 #include "COLLADASaxFWLLoader.h"
+#include "COLLADASaxFWLExtraDataLoader.h"
 
 #include "COLLADAFWUniqueId.h"
 #include "COLLADAFWExtraData.h"
@@ -62,39 +63,35 @@
 	class IntermediateTargetable;
 
     /** Base class for all loaders that load parts of files or entire files */
-    class IFilePartLoader
+    class IFilePartLoader : public ExtraDataLoader
 	{
 	public:
+
         friend class RootParser14;
         friend class RootParser15;
 
-			
-
 	private:
 
 		/** The currently working file part loader.*/
 		IFilePartLoader* mPartLoader;
 
-		/** The name of the profile of the last parsed technique element.*/
-		String mTechniqueProfileName;
-
         /** Object derived from a generated parser. */
         IParserImpl* mParserImpl;
 
     public:
 
+        /** Constructor. */
+        IFilePartLoader();
+
+        /** Destructor. */
+        virtual ~IFilePartLoader();
+
 		/** Returns a pointer to the collada loader. */
 		virtual Loader* getColladaLoader() =0;
 
 		/** Returns a const pointer to the collada document. */
 		virtual const Loader* getColladaLoader()const =0;
 
-		/** Returns a pointer to the file loader. */
-		virtual FileLoader* getFileLoader() =0;
-
-		/** Returns a pointer to the file loader. */
-		virtual const FileLoader* getFileLoader() const =0;
-
 		/** Returns the writer the data will be written to.*/
 		COLLADAFW::IWriter* writer();
 
@@ -120,14 +117,14 @@
 		@param uriString The uriString of the element to get the COLLADAFW::UniqueId for
 		@param classId The COLLADAFW::ClassId of the object that will be created for @a element.
 		@return The elements COLLADAFW::UniqueId */
-		const COLLADAFW::UniqueId& getUniqueId(const String& uriString, COLLADAFW::ClassId classId);
+		const COLLADAFW::UniqueId& createUniqueId(const String& uriString, COLLADAFW::ClassId classId);
 
 		/** Returns the COLLADAFW::UniqueId of the element with uri @a uri. If the uri has been
 		passed to this method before, the same 	COLLADAFW::UniqueId will be returned,  if not, an 
 		invalid unique id will be returned.
 		@param uriString The uriString of the element to get the COLLADAFW::UniqueId for
 		@return The elements COLLADAFW::UniqueId or COLLADAFW::UniqueId::INVALID*/
-		const COLLADAFW::UniqueId& getUniqueId(const String& uriString);
+		const COLLADAFW::UniqueId& createUniqueId(const String& uriString);
 
 		/** Returns the COLLADAFW::UniqueId of the element with id  @a colladaId in the current file.
 		If the id within this file has been passed to this method before, the same 	COLLADAFW::UniqueId
@@ -135,7 +132,7 @@
 		@param id The collada id of the element to get the COLLADAFW::UniqueId for
 		@param classId The COLLADAFW::ClassId of the object that will be created for @a element.
 		@return The elements COLLADAFW::UniqueId */
-		COLLADAFW::UniqueId getUniqueIdFromId( const ParserChar* colladaId, COLLADAFW::ClassId classId );
+		COLLADAFW::UniqueId createUniqueIdFromId( const ParserChar* colladaId, COLLADAFW::ClassId classId );
 
 		/** Returns the COLLADAFW::UniqueId of the element referenced by the url  @a url. If the has
 		been passed to this method before, the same COLLADAFW::UniqueId will be returned, if not,
@@ -143,7 +140,7 @@
 		@param url The url of the element to get the COLLADAFW::UniqueId for
 		@param classId The COLLADAFW::ClassId of the object that will be created for @a element.
 		@return The elements COLLADAFW::UniqueId */
-		const COLLADAFW::UniqueId& getUniqueIdFromUrl( const ParserChar* url, COLLADAFW::ClassId classId );
+		const COLLADAFW::UniqueId& createUniqueIdFromUrl( const ParserChar* url, COLLADAFW::ClassId classId );
 
 		/** Returns the COLLADAFW::UniqueId of the element referenced by the url  @a url. If the has
 		been passed to this method before, the same COLLADAFW::UniqueId will be returned, if not,
@@ -151,7 +148,7 @@
 		@param url The url of the element to get the COLLADAFW::UniqueId for
 		@param classId The COLLADAFW::ClassId of the object that will be created for @a element.
 		@return The elements COLLADAFW::UniqueId */
-		const COLLADAFW::UniqueId& getUniqueIdFromUrl( const COLLADABU::URI& url, COLLADAFW::ClassId classId );
+		const COLLADAFW::UniqueId& createUniqueIdFromUrl( const COLLADABU::URI& url, COLLADAFW::ClassId classId );
 
 		/** Returns the COLLADAFW::UniqueId of the element referenced by the url  @a url. If the has
 		been passed to this method before, the same COLLADAFW::UniqueId will be returned,   if not, an 
@@ -160,14 +157,14 @@
 		@param isAbsolute If true, the url is assumed to be absolute, otherwise it will be made absolute 
 		using the current file urie.
 		@return The elements COLLADAFW::UniqueId or COLLADAFW::UniqueId::INVALID*/
-		const COLLADAFW::UniqueId& getUniqueIdFromUrl( const COLLADABU::URI& url, bool isAbsolute = false  );
+		const COLLADAFW::UniqueId& createUniqueIdFromUrl( const COLLADABU::URI& url, bool isAbsolute = false  );
 
 		/** Returns the COLLADAFW::UniqueId of an element with no uri.  At each call a new
 		COLLADAFW::UniqueId will be created and returned. Use this member for collada elements that
 		do not have an id.
 		@param classId The COLLADAFW::ClassId of the object that will be created for @a element.
 		@return The elements COLLADAFW::UniqueId */
-		COLLADAFW::UniqueId getUniqueId(COLLADAFW::ClassId classId);
+		COLLADAFW::UniqueId createUniqueId(COLLADAFW::ClassId classId);
 
 		/** Returns the GeometryMaterialIdInfo object of the geometry with @a uniqueId. If this method has
 		not been called before with the same uniqueId, an empty GeometryMaterialIdInfo is created, added to
@@ -296,7 +293,8 @@
 		}
 
 
-		virtual bool begin__technique( const technique__AttributeData& attributeData );
+        /** Starts loading a extra tag. */
+        virtual bool begin__technique( const technique__AttributeData& attributeData );
 
 		virtual bool end__technique();
 
@@ -306,15 +304,6 @@
 		when creating a new FilePartLoader and switching to it.*/
 		void deleteFilePartLoader();
 
-
-	public:
-
-        /** Constructor. */
-		IFilePartLoader();
-
-        /** Destructor. */
-		virtual ~IFilePartLoader();
-
 	private:
 
         /** Disable default copy ctor. */
Index: include/COLLADASaxFWLIParserImpl.h
===================================================================
--- include/COLLADASaxFWLIParserImpl.h	(revision 684)
+++ include/COLLADASaxFWLIParserImpl.h	(working copy)
@@ -13,6 +13,7 @@
 
 #include "COLLADASaxFWLPrerequisites.h"
 
+
 namespace COLLADASaxFWL
 {
 
Index: include/COLLADASaxFWLLibraryAnimationsLoader.h
===================================================================
--- include/COLLADASaxFWLLibraryAnimationsLoader.h	(revision 684)
+++ include/COLLADASaxFWLLibraryAnimationsLoader.h	(working copy)
@@ -70,6 +70,12 @@
         /** Returns the ExtraData object, that should be used to store the extra data. */
         virtual COLLADAFW::ExtraData* getExtraData();
 
+        /** Returns the second part of the key.*/
+        virtual const char* getSecondKey();
+
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId();
+
 		/** Searches for the animation info of animation created for the COLLADA sampler with id @a samplerId.
 		If it could not be found, an invalid Unique id is returned.*/
 		AnimationInfo* getAnimationInfoBySamplerId( const String& samplerId);
Index: include/COLLADASaxFWLLibraryArticulatedSystemsLoader.h
===================================================================
--- include/COLLADASaxFWLLibraryArticulatedSystemsLoader.h	(revision 684)
+++ include/COLLADASaxFWLLibraryArticulatedSystemsLoader.h	(working copy)
@@ -82,6 +82,8 @@
 		/** Returns the ExtraData object, that should be used to store the extra data. The current kinematics or articulated extra object.*/
 		virtual COLLADAFW::ExtraData* getExtraData();
 
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId();
 
 		virtual bool end__library_articulated_systems();
 
Index: include/COLLADASaxFWLLibraryCamerasLoader.h
===================================================================
--- include/COLLADASaxFWLLibraryCamerasLoader.h	(revision 684)
+++ include/COLLADASaxFWLLibraryCamerasLoader.h	(working copy)
@@ -60,6 +60,9 @@
 		/** Returns the ExtraData object, that should be used to store the extra data. */
         virtual COLLADAFW::ExtraData* getExtraData ();
 
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId();
+
 		/** Finishes loading a library cameras.*/
 		virtual bool end__library_cameras();
 
Index: include/COLLADASaxFWLLibraryControllersLoader.h
===================================================================
--- include/COLLADASaxFWLLibraryControllersLoader.h	(revision 684)
+++ include/COLLADASaxFWLLibraryControllersLoader.h	(working copy)
@@ -115,6 +115,12 @@
         /** Returns the ExtraData object, that should be used to store the extra data. */
         virtual COLLADAFW::ExtraData* getExtraData();
 
+        /** Returns the second part of the key.*/
+        virtual const char* getSecondKey();
+
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId();
+
 		/** Write the indices of the v element into the framework.*/
 		bool writeVIndices ( const sint64* data, size_t length );
 
Index: include/COLLADASaxFWLLibraryEffectsLoader.h
===================================================================
--- include/COLLADASaxFWLLibraryEffectsLoader.h	(revision 684)
+++ include/COLLADASaxFWLLibraryEffectsLoader.h	(working copy)
@@ -192,9 +192,12 @@
         /** Returns the ExtraData object, that should be used to store the extra data. */
         virtual COLLADAFW::ExtraData* getExtraData();
 
-        /** Returns the second part of the key, either camera or optics. */
+        /** Returns the second part of the key. */
         virtual const char* getSecondKey();
 
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId();
+
 		/** Creates a new current effect.*/
 		virtual bool begin__effect( const effect__AttributeData& attributeData );
 
Index: include/COLLADASaxFWLLibraryImagesLoader.h
===================================================================
--- include/COLLADASaxFWLLibraryImagesLoader.h	(revision 684)
+++ include/COLLADASaxFWLLibraryImagesLoader.h	(working copy)
@@ -27,7 +27,7 @@
 
 	/** Loads all the images in a library images.  */
 	class LibraryImagesLoader : public FilePartLoader
-		{
+	{
 	private:
 		/** The current image.*/
 		COLLADAFW::Image* mCurrentImage;
@@ -43,7 +43,14 @@
         /** Returns the ExtraData object, that should be used to store the extra data. */
         virtual COLLADAFW::ExtraData* getExtraData();
 
-		/** Finishes loading a library images.*/
+        /** Returns the second part of the key.*/
+        virtual const char* getSecondKey();
+
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId();
+
+        
+        /** Finishes loading a library images.*/
 		virtual bool end__library_images();
 
 		
Index: include/COLLADASaxFWLLibraryKinematicsModelsLoader.h
===================================================================
--- include/COLLADASaxFWLLibraryKinematicsModelsLoader.h	(revision 684)
+++ include/COLLADASaxFWLLibraryKinematicsModelsLoader.h	(working copy)
@@ -65,6 +65,9 @@
 		/** Returns the ExtraData object, that should be used to store the extra data. The current kinematics model object.*/
 		virtual COLLADAFW::ExtraData* getExtraData();
 
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId();
+
 		bool beginAttachment( KinematicAttachment::Type attachmentType, const attachment_AttributeData& attributeData );
 		bool endAttachment();
 
Index: include/COLLADASaxFWLLibraryLightsLoader.h
===================================================================
--- include/COLLADASaxFWLLibraryLightsLoader.h	(revision 684)
+++ include/COLLADASaxFWLLibraryLightsLoader.h	(working copy)
@@ -46,6 +46,13 @@
         /** Returns the ExtraData object, that should be used to store the extra data. */
         virtual COLLADAFW::ExtraData* getExtraData();
 
+        /** Returns the second part of the key.*/
+        virtual const char* getSecondKey();
+
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId();
+
+
 		/** Finishes loading a library effects.*/
 		virtual bool end__library_lights();
 
Index: include/COLLADASaxFWLLibraryMaterialsLoader.h
===================================================================
--- include/COLLADASaxFWLLibraryMaterialsLoader.h	(revision 684)
+++ include/COLLADASaxFWLLibraryMaterialsLoader.h	(working copy)
@@ -46,9 +46,13 @@
         /** Returns the ExtraData object, that should be used to store the extra data. */
         virtual COLLADAFW::ExtraData* getExtraData();
 
-        /** Returns the second part of the key, either camera or optics. */
+        /** Returns the second part of the key. */
         virtual const char* getSecondKey();
 
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId();
+
+
 		/** Create new current material.*/
 		virtual bool begin__material( const material__AttributeData& attributeData );
 
Index: include/COLLADASaxFWLLoader.h
===================================================================
--- include/COLLADASaxFWLLoader.h	(revision 684)
+++ include/COLLADASaxFWLLoader.h	(working copy)
@@ -63,7 +63,7 @@
 
 
 	/** Loader to a COLLADA document and all the documents that are referenced it.*/
-	class Loader : public COLLADAFW::ILoader 
+	class Loader : public COLLADAFW::ILoader
 	{
 	public:
 		/** Maps the unique id of each geometry to the corresponding ColladaSymbolMaterialIdMap.*/
@@ -195,6 +195,9 @@
 		/** The writer that will be fed by this loader.*/
 		COLLADAFW::IWriter* mWriter;
 
+        /** List of registered extra data callback handlers. */
+        ExtraDataCallbackHandlerList mExtraDataCallbackHandlerList;
+
 		/** Maps each already processed dae element to its COLLADAFW::UniqueId. */
 		URIUniqueIdMap mURIUniqueIdMap;
 
@@ -318,6 +321,11 @@
 		@param objectFlags The flags indicating which objects should be loaded.*/
 		void setObjectFlags( int objectFlags ) { mObjectFlags = objectFlags; }
 
+        /** Register an extra data callback handler.
+        * @param ExtraDataCallbackHandler* extraDataCallbackHandler The callback handler to register.
+        * @return bool True, if the handler could be registered successfull. */
+        virtual bool registerExtraDataCallbackHandler ( IExtraDataCallbackHandler* extraDataCallbackHandler );
+
 	private:
 		friend class IFilePartLoader;
 		friend class FileLoader;
Index: include/COLLADASaxFWLMeshLoader.h
===================================================================
--- include/COLLADASaxFWLMeshLoader.h	(revision 684)
+++ include/COLLADASaxFWLMeshLoader.h	(working copy)
@@ -154,6 +154,9 @@
         /** We need a variable for the second key name. */
         String mSecondKey;
 
+        /** Flag for the extra tag preservation, to know if we are parsing in the mesh. */
+        bool mInMesh;
+
     public:
 
         /** Constructor. */
@@ -165,10 +168,13 @@
         /** Returns the ExtraData object, that should be used to store the extra data. */
         virtual COLLADAFW::ExtraData* getExtraData();
 
-		/** Returns the second part of the key, either camera or optics. */
+		/** Returns the second part of the key. */
 		virtual const char* getSecondKey();
 
-		/** Returns the mesh that has just been loaded.*/
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId();
+
+        /** Returns the mesh that has just been loaded.*/
 		COLLADAFW::Mesh* getMesh() { return mMesh; }
 
 		/** Sax callback function for the beginning of a source element.*/
@@ -180,6 +186,9 @@
 		/** Cleans up everything and gives control to calling file part loader.*/
 		virtual bool end__mesh();
 
+        /** Flag for the extra tag preservation, to know if we are parsing in the mesh. */
+        const bool& isInMesh () const { return mInMesh; }
+        void setInMesh ( const bool& val ) { mInMesh = val; }
 
 		/** Sax callback function for the beginning of a vertices element.*/
 		virtual bool begin__vertices( const vertices__AttributeData& attributeData );
Index: include/COLLADASaxFWLNodeLoader.h
===================================================================
--- include/COLLADASaxFWLNodeLoader.h	(revision 684)
+++ include/COLLADASaxFWLNodeLoader.h	(working copy)
@@ -36,6 +36,16 @@
 	/** Imports the entire visual scene and sends it to the writer. */
 	class NodeLoader : public HelperLoaderBase
 	{
+    protected:
+
+        static const unsigned int INSTANCE_CAMERA_BIT;         //0x0000001
+        static const unsigned int INSTANCE_CONTROLLER_BIT;     //0x0000010
+        static const unsigned int INSTANCE_GEOMETRY_BIT;       //0x0000100
+        static const unsigned int INSTANCE_LIGHT_BIT;          //0x0001000
+        static const unsigned int INSTANCE_NODE_BIT;           //0x0010000
+        static const unsigned int BIND_MATERIAL_BIT;           //0x0100000
+        static const unsigned int INSTANCE_MATERIAL_BIT;       //0x1000000
+
 	private:
 		
         /** Stack of nodes.*/
@@ -70,6 +80,11 @@
 		/** The material info of the geometry instantiated in the current instance geometry.*/
 		GeometryMaterialIdInfo* mCurrentMaterialInfo;
 
+    protected:
+
+        /** The status of the current parsing element. */
+        unsigned int mParsingStatus;
+
 		/** The InstanceControllerData of the current instance controller.*/
 		Loader::InstanceControllerData *mCurrentInstanceControllerData;
 
@@ -81,154 +96,153 @@
 		/** Destructor. */
 		virtual ~NodeLoader();
 
-	protected:
+        /** Sax callback function for the beginning of nodes, as child of a node.*/
+        virtual bool begin__node( const node__AttributeData& attributeData );
 
-		/** This method handles the beginning of a node element, independent of its parent.*/
-		bool beginNode( const node__AttributeData& attributeData );
+        /** Sax callback function for the ending of nodes, as child of a node.*/
+        virtual bool end__node();
 
-		/** This method handles the ending of a node element, independent of its parent.*/
-		bool endNode();
 
-	private:
+        /** Sax callback function for the beginning of a translate element.*/
+        virtual bool begin__translate( const translate__AttributeData& attributeData );
 
-		/** Disable default copy ctor. */
-		NodeLoader( const NodeLoader& pre );
+        /** Sax callback function for the ending of a translate element.*/
+        virtual bool end__translate();
 
-		/** Disable default assignment operator. */
-		const NodeLoader& operator= ( const NodeLoader& pre );
+        /** Sax callback function for the float data of a translate element.*/
+        virtual bool data__translate( const float* data, size_t length );
 
-		/** Store a root node, i.e. a node that does not has a node as parent.*/
-		virtual void handleRootNode( COLLADAFW::Node* rootNode ) = 0;
 
-		/** This method handles the beginning of a transformation independent of its type.*/
-		template<class Transformationtype> 
-		bool beginTransformation( const char* sid);
+        /** Sax callback function for the beginning of a rotate element.*/
+        virtual bool begin__rotate( const rotate__AttributeData& attributeData );
 
-		/** This method handles the ending of a transformation independent of its type.*/
-		bool endTransformation();
+        /** Sax callback function for the ending of a rotate element.*/
+        virtual bool end__rotate();
 
-		/** Assigns the bound materials to the current instance with material (geometry or controller).*/
-		bool endInstanceWithMaterial();
+        /** Sax callback function for the float data of a rotate element.*/
+        virtual bool data__rotate( const float* data, size_t length );
 
 
-    public:
-        /** Sax callback function for the beginning of nodes, as child of a node.*/
-		virtual bool begin__node( const node__AttributeData& attributeData );
+        /** Sax callback function for the beginning of a matrix element.*/
+        virtual bool begin__matrix( const matrix__AttributeData& attributeData );
 
-		/** Sax callback function for the ending of nodes, as child of a node.*/
-		virtual bool end__node();
+        /** Sax callback function for the ending of a matrix element.*/
+        virtual bool end__matrix();
 
+        /** Sax callback function for the float data of a rotate element.*/
+        virtual bool data__matrix( const float* data, size_t length );
 
-		/** Sax callback function for the beginning of a translate element.*/
-		virtual bool begin__translate( const translate__AttributeData& attributeData );
 
-		/** Sax callback function for the ending of a translate element.*/
-		virtual bool end__translate();
+        /** Sax callback function for the beginning of a scale element.*/
+        virtual bool begin__scale( const scale__AttributeData& attributeData );
 
-		/** Sax callback function for the float data of a translate element.*/
-		virtual bool data__translate( const float* data, size_t length );
+        /** Sax callback function for the ending of a scale element.*/
+        virtual bool end__scale();
 
+        /** Sax callback function for the float data of a scale element.*/
+        virtual bool data__scale( const float* data, size_t length );
 
-		/** Sax callback function for the beginning of a rotate element.*/
-		virtual bool begin__rotate( const rotate__AttributeData& attributeData );
+        virtual bool begin__skew( const skew__AttributeData& attributeData );
+        virtual bool end__skew();
+        virtual bool data__skew( const float* data, size_t length );
 
-		/** Sax callback function for the ending of a rotate element.*/
-		virtual bool end__rotate();
+        virtual bool begin__lookat( const lookat__AttributeData& attributeData );
+        virtual bool end__lookat();
+        virtual bool data__lookat( const float* data, size_t length );
 
-		/** Sax callback function for the float data of a rotate element.*/
-		virtual bool data__rotate( const float* data, size_t length );
+        /** Sax callback function for the beginning of an instance geometry element.*/
+        virtual bool begin__instance_geometry( const instance_geometry__AttributeData& attributeData );
 
+        /** Sax callback function for the ending of an instance geometry element.*/
+        virtual bool end__instance_geometry();
 
-		/** Sax callback function for the beginning of a matrix element.*/
-		virtual bool begin__matrix( const matrix__AttributeData& attributeData );
 
-		/** Sax callback function for the ending of a matrix element.*/
-		virtual bool end__matrix();
+        /** We do not need to do anything here.*/
+        virtual bool begin__bind_material();
 
-		/** Sax callback function for the float data of a rotate element.*/
-		virtual bool data__matrix( const float* data, size_t length );
+        /** We do not need to do anything here.*/
+        virtual bool end__bind_material();
 
+        /** We do not need to do anything here.*/
+        virtual bool begin__bind_material__technique_common(){return true;}
 
-		/** Sax callback function for the beginning of a scale element.*/
-		virtual bool begin__scale( const scale__AttributeData& attributeData );
+        /** We do not need to do anything here.*/
+        virtual bool end__bind_material__technique_common(){return true;}
 
-		/** Sax callback function for the ending of a scale element.*/
-		virtual bool end__scale();
+        /** Create new current bind material and set basic attributes.*/
+        virtual bool begin__instance_material( const instance_material__AttributeData& attributeData );
 
-		/** Sax callback function for the float data of a scale element.*/
-		virtual bool data__scale( const float* data, size_t length );
+        /** We store all instance_material informations in a set.*/
+        virtual bool end__instance_material();
 
-        virtual bool begin__skew( const skew__AttributeData& attributeData );
-        virtual bool end__skew();
-		virtual bool data__skew( const float* data, size_t length );
 
-		virtual bool begin__lookat( const lookat__AttributeData& attributeData );
-		virtual bool end__lookat();
-		virtual bool data__lookat( const float* data, size_t length );
+        /** We store all bind vertex informations in a set.*/
+        virtual bool begin__bind_vertex_input( const bind_vertex_input__AttributeData& attributeData );
 
-		/** Sax callback function for the beginning of an instance geometry element.*/
-		virtual bool begin__instance_geometry( const instance_geometry__AttributeData& attributeData );
+        /** We do not need to do anything here.*/
+        virtual bool end__bind_vertex_input(){return true; }
 
-		/** Sax callback function for the ending of an instance geometry element.*/
-		virtual bool end__instance_geometry();
 
+        /** Sax callback function for the beginning of an instance node element.*/
+        virtual bool begin__instance_node( const instance_node__AttributeData& attributeData );
 
-		/** We do not need to do anything here.*/
-		virtual bool begin__bind_material(){return true;}
+        /** We don't need to do anything here.*/
+        virtual bool end__instance_node();
 
-		/** We do not need to do anything here.*/
-		virtual bool end__bind_material(){return true;}
 
-		/** We do not need to do anything here.*/
-		virtual bool begin__bind_material__technique_common(){return true;}
+        /** Appends the instance camera to the current node.*/
+        virtual bool begin__instance_camera( const instance_camera__AttributeData& attributeData );
 
-		/** We do not need to do anything here.*/
-		virtual bool end__bind_material__technique_common(){return true;}
+        /** We don't need to do anything here.*/
+        virtual bool end__instance_camera();
 
-		/** Create new current bind material and set basic attributes.*/
-		virtual bool begin__instance_material( const instance_material__AttributeData& attributeData );
-		
-		/** We store all instance_material informations in a set.*/
-		virtual bool end__instance_material();
 
+        /** Appends the instance light to the current node.*/
+        virtual bool begin__instance_light( const instance_light__AttributeData& attributeData );
 
-		/** We store all bind vertex informations in a set.*/
-		virtual bool begin__bind_vertex_input( const bind_vertex_input__AttributeData& attributeData );
+        /** Set the current parsing position. */
+        virtual bool end__instance_light();
 
-		/** We do not need to do anything here.*/
-		virtual bool end__bind_vertex_input(){return true; }
 
+        virtual bool begin__instance_controller( const instance_controller__AttributeData& attributeData );
+        virtual bool end__instance_controller();
 
-		/** Sax callback function for the beginning of an instance node element.*/
-		virtual bool begin__instance_node( const instance_node__AttributeData& attributeData );
 
-		/** We don't need to do anything here.*/
-		virtual bool end__instance_node(){return true;}
+        virtual bool begin__skeleton(){return true;}
+        virtual bool end__skeleton(){return true;}
 
+        virtual bool data__skeleton( COLLADABU::URI value );
 
-		/** Appends the instance camera to the current node.*/
-		virtual bool begin__instance_camera( const instance_camera__AttributeData& attributeData );
+    protected:
 
-		/** We don't need to do anything here.*/
-		virtual bool end__instance_camera(){return true;}
+		/** This method handles the beginning of a node element, independent of its parent.*/
+		bool beginNode( const node__AttributeData& attributeData );
 
+		/** This method handles the ending of a node element, independent of its parent.*/
+		bool endNode();
 
-		/** Appends the instance light to the current node.*/
-		virtual bool begin__instance_light( const instance_light__AttributeData& attributeData );
+	private:
 
-		/** We don't need to do anything here.*/
-		virtual bool end__instance_light(){return true;}
+		/** Disable default copy ctor. */
+		NodeLoader( const NodeLoader& pre );
 
-		virtual bool begin__instance_controller( const instance_controller__AttributeData& attributeData );
-		virtual bool end__instance_controller();
+		/** Disable default assignment operator. */
+		const NodeLoader& operator= ( const NodeLoader& pre );
 
+		/** Store a root node, i.e. a node that does not has a node as parent.*/
+		virtual void handleRootNode( COLLADAFW::Node* rootNode ) = 0;
 
-		virtual bool begin__skeleton(){return true;}
-		virtual bool end__skeleton(){return true;}
+		/** This method handles the beginning of a transformation independent of its type.*/
+		template<class Transformationtype> 
+		bool beginTransformation( const char* sid);
 
-		virtual bool data__skeleton( COLLADABU::URI value );
+		/** This method handles the ending of a transformation independent of its type.*/
+		bool endTransformation();
 
+		/** Assigns the bound materials to the current instance with material (geometry or controller).*/
+		bool endInstanceWithMaterial();
 
+
 	};
 
 } // namespace COLLADASAXFWL
Index: include/COLLADASaxFWLRootParser14.h
===================================================================
--- include/COLLADASaxFWLRootParser14.h	(revision 684)
+++ include/COLLADASaxFWLRootParser14.h	(working copy)
@@ -13,7 +13,9 @@
 
 #include "COLLADASaxFWLPrerequisites.h"
 #include "COLLADASaxFWLIParserImpl14.h"
+#include "COLLADASaxFWLExtraDataLoader.h"
 
+
 namespace COLLADASaxFWL
 {
     class FileLoader;
@@ -21,15 +23,21 @@
     /**
     * Inherits all generated public parsers and delegates calls to actual implementations.
     */
-    class RootParser14 : public IParserImpl14
+    class RootParser14 : public IParserImpl14, public ExtraDataLoader
     {
     private:
+
         /** FileLoader which does actual work. */
         FileLoader* mFileLoader;
 
     public:
+
         RootParser14( FileLoader* fileLoader );
 
+        /** FileLoader which does actual work. */
+        FileLoader* getFileLoader () { return mFileLoader; }
+        const FileLoader* getFileLoader () const { return mFileLoader; }
+
         /** Informs about the end of reading the COLLADA file. */
         virtual bool end__COLLADA();
 
@@ -69,6 +77,9 @@
         /** Starts loading a library animations.*/
         virtual bool begin__library_controllers( const COLLADASaxFWL14::library_controllers__AttributeData& attributeData );
 
+        /** Starts loading an extra tag. */
+        virtual bool begin__technique( const COLLADASaxFWL14::technique__AttributeData& attributeData );
+
     private:
         /** Disable default c-ctor and assignment op. */
         RootParser14( const RootParser14& );
Index: include/COLLADASaxFWLRootParser15.h
===================================================================
--- include/COLLADASaxFWLRootParser15.h	(revision 684)
+++ include/COLLADASaxFWLRootParser15.h	(working copy)
@@ -13,7 +13,9 @@
 
 #include "COLLADASaxFWLPrerequisites.h"
 #include "COLLADASaxFWLIParserImpl15.h"
+#include "COLLADASaxFWLExtraDataLoader.h"
 
+
 namespace COLLADASaxFWL
 {
     class FileLoader;
@@ -21,15 +23,21 @@
     /**
     * Inherits all generated public parsers and delegates calls to actual implementations.
     */
-    class RootParser15 : public IParserImpl15
+    class RootParser15 : public IParserImpl15, public ExtraDataLoader
     {
     private:
+
         /** FileLoader which does actual work. */
         FileLoader* mFileLoader;
 
     public:
+
         RootParser15( FileLoader* fileLoader );
 
+        /** FileLoader which does actual work. */
+        FileLoader* getFileLoader () { return mFileLoader; }
+        const FileLoader* getFileLoader () const { return mFileLoader; }
+
         /** Informs about the end of reading the COLLADA file. */
         virtual bool end__COLLADA();
 
@@ -81,6 +89,9 @@
 		/** Starts loading a library articulated systems.*/
 		virtual bool begin__library_articulated_systems( const COLLADASaxFWL15::library_articulated_systems__AttributeData& attributeData );
 
+        /** Starts loading an extra tag. */
+        virtual bool begin__technique____technique_type( const COLLADASaxFWL15::technique____technique_type__AttributeData& attributeData );
+
     private:
         /** Disable default c-ctor and assignment op. */
         RootParser15( const RootParser15& );
Index: include/COLLADASaxFWLTypes.h
===================================================================
--- include/COLLADASaxFWLTypes.h	(revision 684)
+++ include/COLLADASaxFWLTypes.h	(working copy)
@@ -26,6 +26,8 @@
 
 namespace COLLADASaxFWL
 {
+    class IExtraDataCallbackHandler;
+
     struct AnimationInfo
 	{
 		static const AnimationInfo INVALID;
@@ -46,8 +48,8 @@
 
 	typedef std::vector<COLLADAFW::Node*> NodeList;
 
+    typedef std::vector<IExtraDataCallbackHandler*> ExtraDataCallbackHandlerList;
 
-
 } // namespace COLLADASAXFWL
 
 #endif // __COLLADASAXFWL_TYPES_H__
Index: include/COLLADASaxFWLVisualSceneLoader.h
===================================================================
--- include/COLLADASaxFWLVisualSceneLoader.h	(revision 684)
+++ include/COLLADASaxFWLVisualSceneLoader.h	(working copy)
@@ -35,6 +35,9 @@
 		/** Pointer to the visual scene this loader creates.*/
 		COLLADAFW::VisualScene* mVisualScene;
 
+        /** Flag for the extra data, to know the parsing position. */
+        bool mInNode;
+
 	public:
 
         /** Constructor. */
@@ -43,22 +46,16 @@
         /** Destructor. */
 		virtual ~VisualSceneLoader();
 
-	private:
+        /** Returns the ExtraData object, that should be used to store the extra data. */
+        virtual COLLADAFW::ExtraData* getExtraData();
 
-        /** Disable default copy ctor. */
-		VisualSceneLoader( const VisualSceneLoader& pre );
+        /** Returns the second part of the key.*/
+        virtual const char* getSecondKey();
 
-        /** Disable default assignment operator. */
-		const VisualSceneLoader& operator= ( const VisualSceneLoader& pre );
+        /** Returns the unique id of the current parsed object. */
+        virtual const COLLADAFW::UniqueId& getUniqueId();
 
-		/** Appends the root node to the array of root nodes of the visual scene,*/
-		void handleRootNode( COLLADAFW::Node* rootNode );
 
-    public:
-
-        /** Returns the ExtraData object, that should be used to store the extra data. */
-        virtual COLLADAFW::ExtraData* getExtraData();
-
         /** Sax callback function for the beginning of nodes, as child of a visual scene.*/
 		virtual bool begin__visual_scene__node( const node__AttributeData& attributeData );
 
@@ -68,6 +65,17 @@
 		/** Sax callback function for the ending of a visual scene.*/
 		virtual bool end__visual_scene();
 
+    private:
+
+        /** Disable default copy ctor. */
+        VisualSceneLoader( const VisualSceneLoader& pre );
+
+        /** Disable default assignment operator. */
+        const VisualSceneLoader& operator= ( const VisualSceneLoader& pre );
+
+        /** Appends the root node to the array of root nodes of the visual scene,*/
+        void handleRootNode( COLLADAFW::Node* rootNode );
+
 	};
 
 } // namespace COLLADASAXFWL
Index: include/generated14/COLLADASaxFWLColladaParserAutoGen14Private.h
===================================================================
--- include/generated14/COLLADASaxFWLColladaParserAutoGen14Private.h	(revision 684)
+++ include/generated14/COLLADASaxFWLColladaParserAutoGen14Private.h	(working copy)
@@ -415,7 +415,9 @@
 #endif
 bool _freeAttributes__param( void* attributeData );
 
-bool _begin__technique( void* attributeData ){return mImpl->begin__technique(*static_cast<technique__AttributeData*>(attributeData));}
+bool _begin__technique( void* attributeData ){
+    return mImpl->begin__technique(*static_cast<technique__AttributeData*>(attributeData));
+}
 bool _data__technique( const ParserChar* text, size_t textLength );
 bool _end__technique(){return mImpl->end__technique();}
 bool _preBegin__technique( const ParserAttributes& attributes, void ** attributeDataPtr, void ** validationDataPtr );
Index: scripts/COLLADASaxFrameworkLoader.vcproj
===================================================================
--- scripts/COLLADASaxFrameworkLoader.vcproj	(revision 684)
+++ scripts/COLLADASaxFrameworkLoader.vcproj	(working copy)
@@ -1243,6 +1243,14 @@
 				>
 			</File>
 			<File
+				RelativePath="..\src\COLLADASaxFWLExtraDataElementHandler.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\src\COLLADASaxFWLExtraDataLoader.cpp"
+				>
+			</File>
+			<File
 				RelativePath="..\src\COLLADASaxFWLFileLoader.cpp"
 				>
 			</File>
@@ -1275,6 +1283,10 @@
 				>
 			</File>
 			<File
+				RelativePath="..\src\COLLADASaxFWLIExtraDataCallbackHandler.cpp"
+				>
+			</File>
+			<File
 				RelativePath="..\src\COLLADASaxFWLIFilePartLoader.cpp"
 				>
 			</File>
@@ -1933,6 +1945,14 @@
 				>
 			</File>
 			<File
+				RelativePath="..\include\COLLADASaxFWLExtraDataElementHandler.h"
+				>
+			</File>
+			<File
+				RelativePath="..\include\COLLADASaxFWLExtraDataLoader.h"
+				>
+			</File>
+			<File
 				RelativePath="..\include\COLLADASaxFWLFileLoader.h"
 				>
 			</File>
@@ -1969,6 +1989,10 @@
 				>
 			</File>
 			<File
+				RelativePath="..\include\COLLADASaxFWLIExtraDataCallbackHandler.h"
+				>
+			</File>
+			<File
 				RelativePath="..\include\COLLADASaxFWLIFilePartLoader.h"
 				>
 			</File>
Index: src/COLLADASaxFWLDocumentProcessor.cpp
===================================================================
--- src/COLLADASaxFWLDocumentProcessor.cpp	(revision 684)
+++ src/COLLADASaxFWLDocumentProcessor.cpp	(working copy)
@@ -391,7 +391,7 @@
 			}
 		}
 
-		COLLADAFW::SkinController skinController( getUniqueId(COLLADAFW::SkinController::ID()));
+		COLLADAFW::SkinController skinController( createUniqueId(COLLADAFW::SkinController::ID()));
 
 		COLLADAFW::UniqueIdArray &jointsUniqueIds = skinController.getJoints();
 		jointsUniqueIds.allocMemory( joints.size() );
@@ -454,7 +454,7 @@
 					continue;
 				}
 
-				const COLLADAFW::UniqueId& sourceUniqueId = getUniqueIdFromUrl(*sourceUrl, true);
+				const COLLADAFW::UniqueId& sourceUniqueId = createUniqueIdFromUrl(*sourceUrl, true);
 				if ( !sourceUniqueId.isValid() )
 				{
 					// TODO handle error
Index: src/COLLADASaxFWLExtraDataElementHandler.cpp
===================================================================
--- src/COLLADASaxFWLExtraDataElementHandler.cpp	(revision 0)
+++ src/COLLADASaxFWLExtraDataElementHandler.cpp	(revision 0)
@@ -0,0 +1,111 @@
+/*
+    Copyright (c) 2008-2009 NetAllied Systems GmbH
+
+    This file is part of COLLADASaxFrameworkLoader.
+
+    Licensed under the MIT Open Source License, 
+    for details please see LICENSE file or the website
+    http://www.opensource.org/licenses/mit-license.php
+*/
+
+#include "COLLADASaxFWLStableHeaders.h"
+#include "COLLADASaxFWLExtraDataElementHandler.h"
+#include "COLLADASaxFWLIExtraDataCallbackHandler.h"
+
+
+namespace COLLADASaxFWL
+{
+
+    //------------------------------
+    ExtraDataElementHandler::ExtraDataElementHandler() 
+        : mExtraDataCallbackHandlerList (0)
+        , mCallbackHandlersCallingList (0)
+	{
+	}
+	
+    //------------------------------
+	ExtraDataElementHandler::~ExtraDataElementHandler()
+	{
+        if ( mCallbackHandlersCallingList ) 
+        {
+            delete[] mCallbackHandlersCallingList;
+            mCallbackHandlersCallingList = 0;
+        }
+	}
+
+    //------------------------------
+    void ExtraDataElementHandler::setExtraDataCallbackHandlerList ( 
+        const COLLADASaxFWL::ExtraDataCallbackHandlerList& val )
+    {
+        mExtraDataCallbackHandlerList = val; 
+
+        if ( mCallbackHandlersCallingList ) 
+        {
+            delete[] mCallbackHandlersCallingList;
+            mCallbackHandlersCallingList = 0;
+        }
+        mCallbackHandlersCallingList = new bool [mExtraDataCallbackHandlerList.size ()];
+    }
+
+    //------------------------------
+    void ExtraDataElementHandler::setExtraDataCallbackHandlerCalling ( const size_t index, const bool calling )
+    {
+        if ( mCallbackHandlersCallingList && index <= mExtraDataCallbackHandlerList.size () )
+            mCallbackHandlersCallingList [index] = calling;
+    }
+
+    //------------------------------
+    bool ExtraDataElementHandler::elementBegin( const ParserChar* elementName, const GeneratedSaxParser::xmlChar** attributes )
+    {
+        // Go through the list of extra data callback handlers and call the elementBegin method.
+        const size_t numHandlers = mExtraDataCallbackHandlerList.size ();
+        if ( numHandlers > 0 && !mCallbackHandlersCallingList ) return false;
+
+        for ( size_t i=0; i<numHandlers; ++i )
+        {
+            if ( mCallbackHandlersCallingList[i] )
+            {
+                IExtraDataCallbackHandler* callbackHandler = mExtraDataCallbackHandlerList [i];
+                callbackHandler->elementBegin ( elementName, attributes );
+            }
+        }
+        return true;
+    }
+
+    //------------------------------
+    bool ExtraDataElementHandler::elementEnd( const ParserChar* elementName )
+    {
+        // Go through the list of extra data callback handlers and call the elementEnd method.
+        const size_t numHandlers = mExtraDataCallbackHandlerList.size ();
+        if ( numHandlers > 0 && !mCallbackHandlersCallingList ) return false;
+
+        for ( size_t i=0; i<numHandlers; ++i )
+        {
+            if ( mCallbackHandlersCallingList[i] )
+            {
+                IExtraDataCallbackHandler* callbackHandler = mExtraDataCallbackHandlerList [i];
+                callbackHandler->elementEnd ( elementName );
+            }
+        }
+        return true;
+    }
+
+    //------------------------------
+    bool ExtraDataElementHandler::textData( const ParserChar* text, size_t textLength )
+    {
+        // Go through the list of extra data callback handlers and call the textData method.
+        const size_t numHandlers = mExtraDataCallbackHandlerList.size ();
+        if ( numHandlers > 0 && !mCallbackHandlersCallingList ) return false;
+
+        for ( size_t i=0; i<numHandlers; ++i )
+        {
+            if ( mCallbackHandlersCallingList[i] )
+            {
+                IExtraDataCallbackHandler* callbackHandler = mExtraDataCallbackHandlerList [i];
+                callbackHandler->textData ( text, textLength );
+            }
+        }
+        return true;
+    }
+
+} // namespace COLLADASaxFWL
Index: src/COLLADASaxFWLExtraDataLoader.cpp
===================================================================
--- src/COLLADASaxFWLExtraDataLoader.cpp	(revision 0)
+++ src/COLLADASaxFWLExtraDataLoader.cpp	(revision 0)
@@ -0,0 +1,64 @@
+/*
+    Copyright (c) 2008-2009 NetAllied Systems GmbH
+
+    This file is part of COLLADASaxFrameworkLoader.
+
+    Licensed under the MIT Open Source License, 
+    for details please see LICENSE file or the website
+    http://www.opensource.org/licenses/mit-license.php
+*/
+
+#include "COLLADASaxFWLStableHeaders.h"
+#include "COLLADASaxFWLExtraDataLoader.h"
+#include "COLLADASaxFWLExtraDataElementHandler.h"
+#include "COLLADASaxFWLFileLoader.h"
+#include "COLLADASaxFWLIExtraDataCallbackHandler.h"
+
+
+namespace COLLADASaxFWL
+{
+
+    //------------------------------
+	ExtraDataLoader::ExtraDataLoader() 
+	{
+	}
+	
+    //------------------------------
+	ExtraDataLoader::~ExtraDataLoader()
+	{
+	}
+
+    //------------------------------
+    bool ExtraDataLoader::root__begin__technique ( const technique__AttributeData& attributeData )
+    {
+        // Get the extra data element handler.
+        ExtraDataElementHandler& extraDataElementHandler = getFileLoader ()->getExtraDataElementHandler ();
+
+        // Ask all handlers, if they want to have the data of the current extra tag.
+        // (profile name, element name ("optics"), id (cameraId)) 
+        const ExtraDataCallbackHandlerList& extraDataCallbackHandlerList = extraDataElementHandler.getExtraDataCallbackHandlerList ();
+        size_t numHandlers = extraDataCallbackHandlerList.size ();
+        for ( size_t i=0; i<numHandlers; ++i )
+        {
+            IExtraDataCallbackHandler* extraDataCallbackHandler = extraDataCallbackHandlerList[i];
+
+            // Get the hash value of the current element.
+            size_t level = 1;
+            StringHash elementHash = getFileLoader ()->getElementHash ( level );
+
+            // Get the profile name.
+            const ParserChar* profileName = attributeData.profile;
+
+            // Get the unique id of the current parsed element.
+            const COLLADAFW::UniqueId& frameworkId = getUniqueId ();
+
+            // Ask, if the current handler should parse the extra tags of the current element.
+            bool parseElement = extraDataCallbackHandler->parseElement ( profileName, elementHash, frameworkId );
+
+            // Store the flag in the list.
+            extraDataElementHandler.setExtraDataCallbackHandlerCalling ( i, parseElement );
+        }
+        return true;
+    }
+
+} // namespace COLLADASaxFWL
Index: src/COLLADASaxFWLFileLoader.cpp
===================================================================
--- src/COLLADASaxFWLFileLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLFileLoader.cpp	(working copy)
@@ -51,8 +51,9 @@
 							 const COLLADABU::URI& fileURI, 
 							 SaxParserErrorHandler* saxParserErrorHandler, 
 							 int objectFlags,
-							 int& parsedObjectFlags)
-         : DocumentProcessor( colladaLoader, saxParserErrorHandler, objectFlags, parsedObjectFlags)
+							 int& parsedObjectFlags, 
+                             const ExtraDataCallbackHandlerList& extraDataCallbackHandlerList )
+         : DocumentProcessor( colladaLoader, saxParserErrorHandler, objectFlags, parsedObjectFlags )
 		 , mFileURI( fileURI )
          , mParsingStatus( PARSING_NOT_STARTED )
 		 , mSaxParserErrorHandler(saxParserErrorHandler)
@@ -61,7 +62,7 @@
          , mXmlSaxParser( 0 )
 		 , mVersionParser(0)
 	{
-
+        getExtraDataElementHandler ().setExtraDataCallbackHandlerList ( extraDataCallbackHandlerList );
 	}
 
 	//-----------------------------
Index: src/COLLADASaxFWLFormulasLoader.cpp
===================================================================
--- src/COLLADASaxFWLFormulasLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLFormulasLoader.cpp	(working copy)
@@ -62,7 +62,7 @@
 	//-----------------------------------------------------------------
 	bool FormulasLoader::begin__formula( const formula__AttributeData& attributeData )
 	{
-		mCurrentFormula = FW_NEW COLLADAFW::Formula( getHandlingFilePartLoader()->getUniqueIdFromId( attributeData.id, COLLADAFW::Formula::ID()) );
+		mCurrentFormula = FW_NEW COLLADAFW::Formula( getHandlingFilePartLoader()->createUniqueIdFromId( attributeData.id, COLLADAFW::Formula::ID()) );
 		if ( attributeData.name )
 			mCurrentFormula->setName( attributeData.name );
 		else if ( attributeData.id )
Index: src/COLLADASaxFWLGeometryLoader.cpp
===================================================================
--- src/COLLADASaxFWLGeometryLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLGeometryLoader.cpp	(working copy)
@@ -36,6 +36,22 @@
         return mMeshLoader->getMesh();
     }
 
+    //------------------------------
+    const char* GeometryLoader::getSecondKey ()
+    {
+        if ( mMeshLoader->isInMesh () )
+        {
+            return mMeshLoader->getSecondKey ();
+        }
+        else return COLLADAFW::ExtraKeys::GEOMETRY;
+    }
+
+    //------------------------------
+    const COLLADAFW::UniqueId& GeometryLoader::getUniqueId ()
+    {
+        return mMeshLoader->getUniqueId ();
+    }
+
 	//------------------------------
 	bool GeometryLoader::begin__mesh()
 	{
Index: src/COLLADASaxFWLIExtraDataCallbackHandler.cpp
===================================================================
--- src/COLLADASaxFWLIExtraDataCallbackHandler.cpp	(revision 0)
+++ src/COLLADASaxFWLIExtraDataCallbackHandler.cpp	(revision 0)
@@ -0,0 +1,28 @@
+/*
+    Copyright (c) 2008-2009 NetAllied Systems GmbH
+
+    This file is part of COLLADASaxFrameworkLoader.
+
+    Licensed under the MIT Open Source License, 
+    for details please see LICENSE file or the website
+    http://www.opensource.org/licenses/mit-license.php
+*/
+
+#include "COLLADASaxFWLStableHeaders.h"
+#include "COLLADASaxFWLIExtraDataCallbackHandler.h"
+
+
+namespace COLLADASaxFWL
+{
+
+    //------------------------------
+    IExtraDataCallbackHandler::IExtraDataCallbackHandler() 
+	{
+	}
+
+    //------------------------------
+    IExtraDataCallbackHandler::~IExtraDataCallbackHandler()
+    {
+    }
+
+} // namespace COLLADASaxFWL
Index: src/COLLADASaxFWLIFilePartLoader.cpp
===================================================================
--- src/COLLADASaxFWLIFilePartLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLIFilePartLoader.cpp	(working copy)
@@ -16,6 +16,8 @@
 #include "COLLADASaxFWLIParserImpl.h"
 #include "COLLADASaxFWLIParserImpl14.h"
 #include "COLLADASaxFWLIParserImpl15.h"
+#include "COLLADASaxFWLIExtraDataCallbackHandler.h"
+
 #include "COLLADAFWExtraKeys.h"
 
 
@@ -23,7 +25,7 @@
 {
 
     //------------------------------
-	IFilePartLoader::IFilePartLoader()
+	IFilePartLoader::IFilePartLoader ()
 		: mPartLoader(0)
         , mParserImpl(0)
 	{
@@ -47,7 +49,7 @@
 	}
 
 	//-----------------------------
-	const COLLADAFW::UniqueId& IFilePartLoader::getUniqueId( const String& uriString, COLLADAFW::ClassId classId )
+	const COLLADAFW::UniqueId& IFilePartLoader::createUniqueId( const String& uriString, COLLADAFW::ClassId classId )
 	{
 		assert( getColladaLoader() );
 
@@ -57,7 +59,7 @@
 	}
 
 	//-----------------------------
-	const COLLADAFW::UniqueId& IFilePartLoader::getUniqueId( const String& uriString)
+	const COLLADAFW::UniqueId& IFilePartLoader::createUniqueId( const String& uriString)
 	{
 		assert( getColladaLoader() );
 
@@ -67,12 +69,12 @@
 	}
 
 	//-----------------------------
-	COLLADAFW::UniqueId IFilePartLoader::getUniqueIdFromId( const ParserChar* colladaId, COLLADAFW::ClassId classId )
+	COLLADAFW::UniqueId IFilePartLoader::createUniqueIdFromId( const ParserChar* colladaId, COLLADAFW::ClassId classId )
 	{
 		assert( getColladaLoader() );
 
 		if ( !colladaId || !(*colladaId) )
-			return getUniqueId(classId);
+			return createUniqueId(classId);
 
 		COLLADABU::URI uri(getFileUri(), String("#") + String((const char *)colladaId));
 
@@ -81,7 +83,7 @@
 
 
 	//-----------------------------
-	const COLLADAFW::UniqueId& IFilePartLoader::getUniqueIdFromUrl( const ParserChar* url, COLLADAFW::ClassId classId )
+	const COLLADAFW::UniqueId& IFilePartLoader::createUniqueIdFromUrl( const ParserChar* url, COLLADAFW::ClassId classId )
 	{
 		assert( getColladaLoader() );
 		if ( !url || !(*url) )
@@ -93,7 +95,7 @@
 	}
 
 	//-----------------------------
-	const COLLADAFW::UniqueId& IFilePartLoader::getUniqueIdFromUrl( const COLLADABU::URI& url, COLLADAFW::ClassId classId )
+	const COLLADAFW::UniqueId& IFilePartLoader::createUniqueIdFromUrl( const COLLADABU::URI& url, COLLADAFW::ClassId classId )
 	{
 		assert( getColladaLoader() );
 
@@ -103,7 +105,7 @@
 	}
 
 	//-----------------------------
-	const COLLADAFW::UniqueId& IFilePartLoader::getUniqueIdFromUrl( const COLLADABU::URI& url, bool isAbsolute )
+	const COLLADAFW::UniqueId& IFilePartLoader::createUniqueIdFromUrl( const COLLADABU::URI& url, bool isAbsolute )
 	{
 		assert( getColladaLoader() );
 		
@@ -121,7 +123,7 @@
 
 
 	//-----------------------------
-	COLLADAFW::UniqueId IFilePartLoader::getUniqueId( COLLADAFW::ClassId classId )
+	COLLADAFW::UniqueId IFilePartLoader::createUniqueId( COLLADAFW::ClassId classId )
 	{
 		assert( getColladaLoader() );
 		return getColladaLoader()->getUniqueId(classId);
@@ -266,46 +268,18 @@
 	//------------------------------
 	bool IFilePartLoader::begin__technique( const technique__AttributeData& attributeData )
 	{
-		//SaxVirtualFunctionTest(begin__technique(attributeData))
-		if ( attributeData.profile )
-		{
-			mTechniqueProfileName.assign( attributeData.profile );
-		}
-		else
-		{
-			mTechniqueProfileName.clear();
-		}
-		return true;
-	}
+        //SaxVirtualFunctionTest(begin__technique(attributeData))
 
+        return getFileLoader ()->root__begin__technique ( attributeData );
+    }
+
 	//------------------------------
 	bool IFilePartLoader::end__technique()
 	{
-		//SaxVirtualFunctionTest(end__technique())
-		GeneratedSaxParser::RawUnknownElementHandler& rawUnknownElementHandler = getFileLoader()->getRawUnknownElementHandler();
-
-		COLLADAFW::ExtraData* extraData = getExtraData();
-		if ( extraData )
-		{
-			COLLADAFW::ExtraDataArray& extraDataArray = extraData->getExtraDataArray();
-			String key = COLLADAFW::ExtraKeys::BASEKEY;
-			const char* secondKey = getSecondKey();
-			if ( secondKey )
-			{
-				key.append( COLLADAFW::ExtraKeys::KEYSEPARATOR );
-				key.append( secondKey );
-			}
-			key.append( COLLADAFW::ExtraKeys::KEYSEPARATOR );
-			key.append( mTechniqueProfileName );
-
-			extraDataArray.append( FW_NEW COLLADAFW::ExtraDataPair( key, rawUnknownElementHandler.getRawData()) );
-		}
-
-		rawUnknownElementHandler.clearRawData();
-		return true;
+        return true;
 	}
 
-	//------------------------------
+    //------------------------------
 	bool IFilePartLoader::handleFWLError( const SaxFWLError& saxFWLError )
 	{
 		IErrorHandler* errorHandler = getColladaLoader()->getErrorHandler();
Index: src/COLLADASaxFWLJointsLoader.cpp
===================================================================
--- src/COLLADASaxFWLJointsLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLJointsLoader.cpp	(working copy)
@@ -41,7 +41,7 @@
 	//------------------------------
 	bool JointsLoader::beginJointPrimitive( COLLADAFW::JointPrimitive::Type jointPrimitiveType, const char * sid)
 	{
-		mCurrentJointPrimitive = FW_NEW COLLADAFW::JointPrimitive( getHandlingFilePartLoader()->getUniqueId( COLLADAFW::JointPrimitive::ID()), jointPrimitiveType );
+		mCurrentJointPrimitive = FW_NEW COLLADAFW::JointPrimitive( getHandlingFilePartLoader()->createUniqueId( COLLADAFW::JointPrimitive::ID()), jointPrimitiveType );
 		mCurrentJoint->getJointPrimitives().append( mCurrentJointPrimitive );
 		getHandlingFilePartLoader()->addToSidTree(0, sid, mCurrentJointPrimitive);
 		return true;
@@ -58,7 +58,7 @@
 	//------------------------------
 	bool JointsLoader::begin__joint( const joint__AttributeData& attributeData )
 	{
-		mCurrentJoint = FW_NEW COLLADAFW::Joint( getHandlingFilePartLoader()->getUniqueIdFromId( attributeData.id, COLLADAFW::Joint::ID()) );
+		mCurrentJoint = FW_NEW COLLADAFW::Joint( getHandlingFilePartLoader()->createUniqueIdFromId( attributeData.id, COLLADAFW::Joint::ID()) );
 		if ( attributeData.name )
 		{
 			mCurrentJoint->setName(attributeData.name);
Index: src/COLLADASaxFWLKinematicsSceneCreator.cpp
===================================================================
--- src/COLLADASaxFWLKinematicsSceneCreator.cpp	(revision 684)
+++ src/COLLADASaxFWLKinematicsSceneCreator.cpp	(working copy)
@@ -114,7 +114,7 @@
 	//------------------------------
 	COLLADAFW::KinematicsModel* KinematicsSceneCreator::createFWKinematicsModel(KinematicsModel* kinematicsModel)
 	{
-		COLLADAFW::UniqueId uniqueId = mDocumentProcessor->getUniqueIdFromId( kinematicsModel->getId().c_str(), COLLADAFW::KinematicsModel::ID());
+		COLLADAFW::UniqueId uniqueId = mDocumentProcessor->createUniqueIdFromId( kinematicsModel->getId().c_str(), COLLADAFW::KinematicsModel::ID());
 		COLLADAFW::KinematicsModel* fwKinematicsModel = FW_NEW COLLADAFW::KinematicsModel(uniqueId);
 
 		fwKinematicsModel-> appendExtraData(*kinematicsModel);
@@ -257,7 +257,7 @@
 	//------------------------------
 	COLLADAFW::KinematicsController* KinematicsSceneCreator::createFWKinematicsController(KinematicsController* kinematicsController)
 	{
-		COLLADAFW::UniqueId uniqueId = mDocumentProcessor->getUniqueIdFromId( kinematicsController->getId().c_str(), COLLADAFW::KinematicsModel::ID());
+		COLLADAFW::UniqueId uniqueId = mDocumentProcessor->createUniqueIdFromId( kinematicsController->getId().c_str(), COLLADAFW::KinematicsModel::ID());
 		COLLADAFW::KinematicsController* fwKinematicsController = FW_NEW COLLADAFW::KinematicsController(uniqueId);
 
 		fwKinematicsController->appendExtraData(*kinematicsController);
@@ -368,7 +368,7 @@
 	//------------------------------
 	COLLADAFW::UniqueId KinematicsSceneCreator::processInstanceKinematicsModel(const KinematicsInstanceKinematicsModel& instanceKinematicsModel)
 	{
-		COLLADAFW::UniqueId kinematicsModelUniqueId =  mDocumentProcessor->getUniqueIdFromUrl( instanceKinematicsModel.getUrl() );
+		COLLADAFW::UniqueId kinematicsModelUniqueId =  mDocumentProcessor->createUniqueIdFromUrl( instanceKinematicsModel.getUrl() );
 		if ( !kinematicsModelUniqueId.isValid() )
 		{
 			return COLLADAFW::UniqueId::INVALID;
Index: src/COLLADASaxFWLLibraryAnimationsLoader.cpp
===================================================================
--- src/COLLADASaxFWLLibraryAnimationsLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLLibraryAnimationsLoader.cpp	(working copy)
@@ -20,6 +20,7 @@
 #include "COLLADAFWAnimationList.h"
 #include "COLLADAFWIWriter.h"
 #include "COLLADAFWTypes.h"
+#include "COLLADAFWExtraKeys.h"
 
 
 namespace COLLADASaxFWL
@@ -290,7 +291,24 @@
 	{
 	}
 
+    //------------------------------
+    COLLADAFW::ExtraData* LibraryAnimationsLoader::getExtraData ()
+    {
+        return mCurrentAnimationCurve;
+    }
 
+    //------------------------------
+    const char* LibraryAnimationsLoader::getSecondKey ()
+    {
+        return COLLADAFW::ExtraKeys::ANIMATION;
+    }
+
+    //------------------------------
+    const COLLADAFW::UniqueId& LibraryAnimationsLoader::getUniqueId ()
+    {
+        return mCurrentAnimationCurve->getUniqueId ();
+    }
+
 	//------------------------------
 	AnimationInfo* LibraryAnimationsLoader::getAnimationInfoBySamplerId( const String& samplerId )
 	{
@@ -305,7 +323,6 @@
 		}
 	}
 
-
 	//------------------------------
 	bool LibraryAnimationsLoader::end__library_animations()
 	{
@@ -326,7 +343,6 @@
 		return endSource();
 	}
 
-
 	//------------------------------
 	bool LibraryAnimationsLoader::begin__animation( const animation__AttributeData& attributeData )
 	{
@@ -352,7 +368,7 @@
 	//------------------------------
 	bool LibraryAnimationsLoader::begin__sampler( const sampler__AttributeData& attributeData )
 	{
-		mCurrentAnimationCurve = FW_NEW COLLADAFW::AnimationCurve(getUniqueIdFromId(attributeData.id, COLLADAFW::Animation::ID()));
+		mCurrentAnimationCurve = FW_NEW COLLADAFW::AnimationCurve(createUniqueIdFromId(attributeData.id, COLLADAFW::Animation::ID()));
 
 		mCurrentAnimationCurve->setName ( mName );
         mCurrentAnimationCurve->setOriginalId ( mOriginalId );
@@ -712,10 +728,4 @@
 		return true;
 	}
 
-    //------------------------------
-    COLLADAFW::ExtraData* LibraryAnimationsLoader::getExtraData ()
-    {
-        return mCurrentAnimationCurve;
-    }
-
 } // namespace COLLADASaxFWL
Index: src/COLLADASaxFWLLibraryArticulatedSystemsLoader.cpp
===================================================================
--- src/COLLADASaxFWLLibraryArticulatedSystemsLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLLibraryArticulatedSystemsLoader.cpp	(working copy)
@@ -50,6 +50,13 @@
 		}
 	}
 
+    //------------------------------
+    const COLLADAFW::UniqueId& LibraryArticulatedSystemsLoader::getUniqueId ()
+    {
+        // TODO No uniqueId!
+        return COLLADAFW::UniqueId::INVALID;
+    }
+
 	//------------------------------
 	COLLADAFW::ExtraData* LibraryArticulatedSystemsLoader::getExtraData()
 	{
Index: src/COLLADASaxFWLLibraryCamerasLoader.cpp
===================================================================
--- src/COLLADASaxFWLLibraryCamerasLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLLibraryCamerasLoader.cpp	(working copy)
@@ -45,6 +45,12 @@
 		mCurrentCameraHasAspectRatio = false;
 	}
 
+    //------------------------------
+    COLLADAFW::ExtraData* LibraryCamerasLoader::getExtraData ()
+    {
+        return mCurrentCamera;
+    }
+
 	//------------------------------
 	const char* LibraryCamerasLoader::getSecondKey()
 	{
@@ -58,6 +64,12 @@
 		}
 	}
 
+    //------------------------------
+    const COLLADAFW::UniqueId& LibraryCamerasLoader::getUniqueId ()
+    {
+        return mCurrentCamera->getUniqueId ();
+    }
+
 	//------------------------------
 	bool LibraryCamerasLoader::end__library_cameras()
 	{
@@ -69,7 +81,7 @@
 	//------------------------------
 	bool LibraryCamerasLoader::begin__camera( const camera__AttributeData& attributeData )
 	{
-		mCurrentCamera = FW_NEW COLLADAFW::Camera( getUniqueIdFromId( attributeData.id, COLLADAFW::Camera::ID()) );
+		mCurrentCamera = FW_NEW COLLADAFW::Camera( createUniqueIdFromId( attributeData.id, COLLADAFW::Camera::ID()) );
 
 		if ( attributeData.name )
 			mCurrentCamera->setName( (const char*) attributeData.name );
@@ -288,10 +300,4 @@
 		return true;
 	}
 
-    //------------------------------
-    COLLADAFW::ExtraData* LibraryCamerasLoader::getExtraData ()
-    {
-        return mCurrentCamera;
-    }
-
 } // namespace COLLADASaxFWL
Index: src/COLLADASaxFWLLibraryControllersLoader.cpp
===================================================================
--- src/COLLADASaxFWLLibraryControllersLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLLibraryControllersLoader.cpp	(working copy)
@@ -18,6 +18,7 @@
 #include "COLLADAFWGeometry.h"
 #include "COLLADAFWIWriter.h"
 #include "COLLADAFWValidate.h"
+#include "COLLADAFWExtraKeys.h"
 
 
 namespace COLLADASaxFWL
@@ -41,15 +42,46 @@
 			return mCurrentSkinControllerData; 
 		case MORPH_CONTROLLER:
 			return mCurrentMorphController; 
-		case UNKNOWN_CONTROLLER:
+		default:
 			return 0;
 		}
         return 0;
 	}
 
+    //------------------------------
+    const char* LibraryControllersLoader::getSecondKey()
+    {
+        switch ( mCurrentControllerType )
+        {
+        case SKIN_CONTROLLER:
+            // extra data in: controller, skin, joints, vertex_weights
+            return COLLADAFW::ExtraKeys::SKIN_CONTROLLER;
+        case MORPH_CONTROLLER:
+            // extra data in: controller, morph, targets
+            return COLLADAFW::ExtraKeys::MORPH_CONTROLLER;
+        default:
+            return 0;
+        }
+        return 0;
+    }
 
+    //------------------------------
+    const COLLADAFW::UniqueId& LibraryControllersLoader::getUniqueId ()
+    {
+        switch ( mCurrentControllerType )
+        {
+        case SKIN_CONTROLLER:
+            return mCurrentSkinControllerData->getUniqueId ();
+        case MORPH_CONTROLLER:
+            return mCurrentMorphController->getUniqueId ();
+        default:
+            return COLLADAFW::UniqueId::INVALID;
+        }
+        return COLLADAFW::UniqueId::INVALID;
+    }
+
 	//------------------------------
-	ControllerInputSemantics getControllerInputSemanticsBySemanticStr( const char * semanticString)
+	ControllerInputSemantics getControllerInputSemanticsBySemanticStr( const char* semanticString)
 	{
 		if ( strcmp(semanticString, "JOINT" ) == 0 )
 		{
@@ -213,11 +245,11 @@
 	bool LibraryControllersLoader::begin__skin( const skin__AttributeData& attributeData )
 	{
 		mCurrentControllerType = SKIN_CONTROLLER;
-		mCurrentSkinControllerData = FW_NEW COLLADAFW::SkinControllerData(getUniqueIdFromId(mCurrentControllerId.c_str(), COLLADAFW::SkinControllerData::ID()));
+		mCurrentSkinControllerData = FW_NEW COLLADAFW::SkinControllerData(createUniqueIdFromId(mCurrentControllerId.c_str(), COLLADAFW::SkinControllerData::ID()));
 
         mCurrentSkinControllerData->setOriginalId ( mOriginalId );
         mCurrentSkinControllerData->setName ( mCurrentControllerName );
-		mCurrentControllerSourceUniqueId = getUniqueIdFromUrl(attributeData.source);
+		mCurrentControllerSourceUniqueId = createUniqueIdFromUrl(attributeData.source);
 		COLLADABU::URI absoluteUri(getFileUri(), attributeData.source.getURIString());
 		addSkinDataSkinSourcePair( mCurrentSkinControllerData->getUniqueId(), absoluteUri);
 		return true;
@@ -245,8 +277,8 @@
 	bool LibraryControllersLoader::begin__morph( const morph__AttributeData& attributeData )
 	{
 		mCurrentControllerType = MORPH_CONTROLLER;
-		mCurrentMorphController = FW_NEW COLLADAFW::MorphController(getUniqueIdFromId(mCurrentControllerId.c_str(), COLLADAFW::MorphController::ID()));
-		mCurrentControllerSourceUniqueId = getUniqueIdFromUrl(attributeData.source, COLLADAFW::Geometry::ID());
+		mCurrentMorphController = FW_NEW COLLADAFW::MorphController(createUniqueIdFromId(mCurrentControllerId.c_str(), COLLADAFW::MorphController::ID()));
+		mCurrentControllerSourceUniqueId = createUniqueIdFromUrl(attributeData.source, COLLADAFW::Geometry::ID());
 		mCurrentMorphController->setSource( mCurrentControllerSourceUniqueId);
         mCurrentMorphController->setOriginalId ( mOriginalId );
         mCurrentMorphController->setName ( mCurrentControllerName );
@@ -466,7 +498,7 @@
 						StringList::const_iterator itTarget = meshIds.begin();
 						for ( size_t i = 0 ; itTarget != meshIds.end(); ++itTarget, ++i)
 						{
-							morphTargets[i] = getUniqueIdFromId( itTarget->c_str(), COLLADAFW::Geometry::ID());
+							morphTargets[i] = createUniqueIdFromId( itTarget->c_str(), COLLADAFW::Geometry::ID());
 						}
 
 					}
Index: src/COLLADASaxFWLLibraryEffectsLoader.cpp
===================================================================
--- src/COLLADASaxFWLLibraryEffectsLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLLibraryEffectsLoader.cpp	(working copy)
@@ -187,6 +187,7 @@
 				const SamplerInfo& samplerInfo = it->second;
 				colorOrTexture->setType(COLLADAFW::ColorOrTexture::TEXTURE);
 				COLLADAFW::Texture& texture = colorOrTexture->getTexture();
+                texture.setUniqueId ( createUniqueId(COLLADAFW::Texture::ID()) );
 				texture.setSamplerId( samplerIndex );
 				texture.setTextureMapId( getTextureMapIdBySematic( attributeData.texcoord) );
 
@@ -304,7 +305,7 @@
 	//------------------------------
 	bool LibraryEffectsLoader::begin__effect( const effect__AttributeData& attributeData )
 	{
-		mCurrentEffect = FW_NEW COLLADAFW::Effect(getUniqueIdFromId(attributeData.id, COLLADAFW::Effect::ID()));
+		mCurrentEffect = FW_NEW COLLADAFW::Effect(createUniqueIdFromId(attributeData.id, COLLADAFW::Effect::ID()));
 		
         if ( attributeData.name )
             mCurrentEffect->setName ( (const char*)attributeData.name );
@@ -410,7 +411,7 @@
 	//------------------------------
 	bool LibraryEffectsLoader::end__init_from____fx_surface_init_from_common()
 	{
-		mCurrentSurface.imageUniqueId = getUniqueIdFromId((const ParserChar*)mCurrentSurfaceInitFrom.c_str(), COLLADAFW::Image::ID());
+		mCurrentSurface.imageUniqueId = createUniqueIdFromId((const ParserChar*)mCurrentSurfaceInitFrom.c_str(), COLLADAFW::Image::ID());
 		return true;
 	}
 
@@ -426,7 +427,7 @@
     {
         if ( (attributeData.present_attributes & instance_image__AttributeData::ATTRIBUTE_URL_PRESENT) == instance_image__AttributeData::ATTRIBUTE_URL_PRESENT )
         {
-            mCurrentSampler->setSource(getUniqueIdFromUrl(attributeData.url, COLLADAFW::Image::ID()));
+            mCurrentSampler->setSource(createUniqueIdFromUrl(attributeData.url, COLLADAFW::Image::ID()));
         }
         return true;
     }
@@ -465,7 +466,7 @@
 	bool LibraryEffectsLoader::begin__sampler2D____fx_sampler2D_common()
 	{
         mInSampler2D = true;
-		mCurrentSampler = new COLLADAFW::Sampler();
+		mCurrentSampler = new COLLADAFW::Sampler( createUniqueId (COLLADAFW::Sampler::ID()));
 		mCurrentSampler->setSamplerType( COLLADAFW::Sampler::SAMPLER_TYPE_2D );
 		return true;
 	}
@@ -930,4 +931,11 @@
         return mCurrentEffect;
     }
 
+    //------------------------------
+    const COLLADAFW::UniqueId& LibraryEffectsLoader::getUniqueId ()
+    {
+        if ( mCurrentSampler ) return mCurrentSampler->getUniqueId ();
+        return mCurrentEffect->getUniqueId ();
+    }
+
 } // namespace COLLADASaxFWL
Index: src/COLLADASaxFWLLibraryImagesLoader.cpp
===================================================================
--- src/COLLADASaxFWLLibraryImagesLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLLibraryImagesLoader.cpp	(working copy)
@@ -14,6 +14,7 @@
 
 #include "COLLADAFWImage.h"
 #include "COLLADAFWIWriter.h"
+#include "COLLADAFWExtraKeys.h"
 
 
 namespace COLLADASaxFWL
@@ -32,6 +33,24 @@
 	{
 	}
 
+    //------------------------------
+    COLLADAFW::ExtraData* LibraryImagesLoader::getExtraData ()
+    {
+        return mCurrentImage;
+    }
+
+    //------------------------------
+    const char* LibraryImagesLoader::getSecondKey()
+    {
+        return COLLADAFW::ExtraKeys::IMAGE;
+    }
+
+    //------------------------------
+    const COLLADAFW::UniqueId& LibraryImagesLoader::getUniqueId ()
+    {
+        return mCurrentImage->getUniqueId ();
+    }
+
 	//------------------------------
 	bool LibraryImagesLoader::end__library_images()
 	{
@@ -43,7 +62,7 @@
 	//------------------------------
 	bool LibraryImagesLoader::begin__image( const image__AttributeData& attributeData )
 	{
-		mCurrentImage = FW_NEW COLLADAFW::Image( getUniqueIdFromId( attributeData.id, COLLADAFW::Image::ID()) );
+		mCurrentImage = FW_NEW COLLADAFW::Image( createUniqueIdFromId( attributeData.id, COLLADAFW::Image::ID()) );
 
 		if ( attributeData.name )
 			mCurrentImage->setName( (const char*) attributeData.name );
@@ -113,10 +132,4 @@
 		return true;
 	}
 
-    //------------------------------
-    COLLADAFW::ExtraData* LibraryImagesLoader::getExtraData ()
-    {
-        return mCurrentImage;
-    }
-
 } // namespace COLLADASaxFWL
Index: src/COLLADASaxFWLLibraryKinematicsModelsLoader.cpp
===================================================================
--- src/COLLADASaxFWLLibraryKinematicsModelsLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLLibraryKinematicsModelsLoader.cpp	(working copy)
@@ -43,12 +43,19 @@
 		// we are inside a joint instance
 		if ( mCurrentJointInstance )
 		{
-			return COLLADAFW::ExtraKeys::INSTANCEJOINT;
+			return COLLADAFW::ExtraKeys::INSTANCE_JOINT;
 		}
 
 		return 0;
 	}
 
+    //------------------------------
+    const COLLADAFW::UniqueId& LibraryKinematicsModelsLoader::getUniqueId ()
+    {
+        // TODO No uniqueId!
+        return COLLADAFW::UniqueId::INVALID;
+    }
+
 	//------------------------------
 	COLLADAFW::ExtraData* LibraryKinematicsModelsLoader::getExtraData()
 	{
@@ -145,7 +152,7 @@
 	bool LibraryKinematicsModelsLoader::begin__instance_joint( const instance_joint__AttributeData& attributeData )
 	{
 		// Get the unique id of the joint, that will replace this instance in the kinematics model
-		COLLADAFW::UniqueId jointId = getUniqueId( COLLADAFW::Joint::ID() );
+		COLLADAFW::UniqueId jointId = createUniqueId( COLLADAFW::Joint::ID() );
 		mCurrentJointInstance = new KinematicInstance( attributeData.url, jointId );
 		getFileLoader()->addInstanceJoint( mCurrentJointInstance );
 		addToSidTree( 0, attributeData.sid, mCurrentJointInstance );
@@ -262,5 +269,4 @@
 		return mTransformationLoader.dataRotate( data, length);
 	}
 
-
 } // namespace COLLADASaxFWL
Index: src/COLLADASaxFWLLibraryLightsLoader.cpp
===================================================================
--- src/COLLADASaxFWLLibraryLightsLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLLibraryLightsLoader.cpp	(working copy)
@@ -16,7 +16,9 @@
 #include "COLLADAFWIWriter.h"
 #include "COLLADAFWLight.h"
 #include "COLLADAFWColor.h"
+#include "COLLADAFWExtraKeys.h"
 
+
 namespace COLLADASaxFWL
 {
 
@@ -32,7 +34,25 @@
 	{
 	}
 
-	//------------------------------
+    //------------------------------
+    COLLADAFW::ExtraData* LibraryLightsLoader::getExtraData ()
+    {
+        return mCurrentLight;
+    }
+
+    //------------------------------
+    const char* LibraryLightsLoader::getSecondKey ()
+    {
+        return COLLADAFW::ExtraKeys::LIGHT;
+    }
+
+    //------------------------------
+    const COLLADAFW::UniqueId& LibraryLightsLoader::getUniqueId ()
+    {
+        return mCurrentLight->getUniqueId ();
+    }
+
+    //------------------------------
 	bool LibraryLightsLoader::end__library_lights()
 	{
 		moveUpInSidTree();
@@ -43,7 +63,7 @@
 	//------------------------------
 	bool LibraryLightsLoader::begin__light( const light__AttributeData& attributeData )
 	{
-		mCurrentLight = FW_NEW COLLADAFW::Light( getUniqueIdFromId( attributeData.id, COLLADAFW::Light::ID()));
+		mCurrentLight = FW_NEW COLLADAFW::Light( createUniqueIdFromId( attributeData.id, COLLADAFW::Light::ID()));
 
 		if ( attributeData.name )
 			mCurrentLight->setName( (const char*) attributeData.name );
@@ -243,10 +263,4 @@
 		return true;
 	}
 
-    //------------------------------
-    COLLADAFW::ExtraData* LibraryLightsLoader::getExtraData ()
-    {
-        return mCurrentLight;
-    }
-
 } // namespace COLLADASaxFWL
Index: src/COLLADASaxFWLLibraryMaterialsLoader.cpp
===================================================================
--- src/COLLADASaxFWLLibraryMaterialsLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLLibraryMaterialsLoader.cpp	(working copy)
@@ -38,7 +38,7 @@
     //------------------------------
 	bool LibraryMaterialsLoader::begin__material( const material__AttributeData& attributeData )
 	{
-		mCurrentMaterial = FW_NEW COLLADAFW::Material(getUniqueIdFromId(attributeData.id, COLLADAFW::Material::ID()));
+		mCurrentMaterial = FW_NEW COLLADAFW::Material(createUniqueIdFromId(attributeData.id, COLLADAFW::Material::ID()));
 		
         if ( attributeData.name )
 			mCurrentMaterial->setName ( (const char*)attributeData.name );
@@ -69,7 +69,7 @@
 	bool LibraryMaterialsLoader::begin__instance_effect( const instance_effect__AttributeData& attributeData )
 	{
         mInInstanceEffect = true;
-		mCurrentMaterial->setInstantiatedEffect(getUniqueIdFromUrl(attributeData.url, COLLADAFW::Effect::ID()));
+		mCurrentMaterial->setInstantiatedEffect(createUniqueIdFromUrl(attributeData.url, COLLADAFW::Effect::ID()));
 		return true;
 	}
 
@@ -104,4 +104,10 @@
         return mCurrentMaterial;
     }
 
+    //------------------------------
+    const COLLADAFW::UniqueId& LibraryMaterialsLoader::getUniqueId ()
+    {
+        return mCurrentMaterial->getUniqueId ();
+    }
+
 } // namespace COLLADASaxFWL
Index: src/COLLADASaxFWLLoader.cpp
===================================================================
--- src/COLLADASaxFWLLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLLoader.cpp	(working copy)
@@ -204,7 +204,8 @@
 								  getFileUri( mCurrentFileId ),
 								  &saxParserErrorHandler, 
 								  mObjectFlags,
-								  mParsedObjectFlags);
+								  mParsedObjectFlags, 
+                                  mExtraDataCallbackHandlerList );
 			fileLoader.load();
 
 			mCurrentFileId++;
@@ -241,7 +242,8 @@
 								  "no_URI",
 								  &saxParserErrorHandler, 
 								  mObjectFlags,
-								  mParsedObjectFlags);
+								  mParsedObjectFlags, 
+                                  mExtraDataCallbackHandlerList );
 			fileLoader.load( buffer, length );
             
 //			mCurrentFileId++;
@@ -257,7 +259,16 @@
         
 		return true;
 	}
-    
+
+    //---------------------------------
+    bool Loader::registerExtraDataCallbackHandler ( IExtraDataCallbackHandler* extraDataCallbackHandler )
+    {
+        // Push the callback handler in the list of callback handlers.
+        mExtraDataCallbackHandlerList.push_back ( extraDataCallbackHandler );
+
+        return true;
+    }
+
 	//---------------------------------
 	GeometryMaterialIdInfo& Loader::getMeshMaterialIdInfo( const COLLADAFW::UniqueId& uniqueId )
 	{
@@ -314,5 +325,4 @@
 		return false;
 	}
 
-
 } // namespace COLLADA
Index: src/COLLADASaxFWLMeshLoader.cpp
===================================================================
--- src/COLLADASaxFWLMeshLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLMeshLoader.cpp	(working copy)
@@ -29,7 +29,7 @@
 
 	MeshLoader::MeshLoader( IFilePartLoader* callingFilePartLoader, const String& geometryId, const String& geometryName )
 		: SourceArrayLoader (callingFilePartLoader )
-		, mMeshUniqueId(getUniqueIdFromId((ParserChar*)geometryId.c_str(), COLLADAFW::Geometry::ID()))
+		, mMeshUniqueId(createUniqueIdFromId((ParserChar*)geometryId.c_str(), COLLADAFW::Geometry::ID()))
 		, mMesh ( new COLLADAFW::Mesh(mMeshUniqueId) )
 		, mMaterialIdInfo(getMeshMaterialIdInfo(mMeshUniqueId))
 		, mCurrentMeshPrimitive(0)
@@ -55,6 +55,7 @@
         , mColorList (0)
 		, mCurrentPrimitiveType(NONE)
 		, mPOrPhElementCountOfCurrentPrimitive(0)
+        , mInMesh (true)
 	{
         if ( !geometryName.empty() )
             mMesh->setName ( geometryName );
@@ -116,6 +117,12 @@
     }
 
     //------------------------------
+    const COLLADAFW::UniqueId& MeshLoader::getUniqueId ()
+    {
+        return mMesh->getUniqueId ();
+    }
+
+    //------------------------------
     const InputUnshared* MeshLoader::getVertexInputBySemantic ( const InputSemantic::Semantic& semantic ) const 
     {
         // Search the vertex input elements for the semantic element.
@@ -810,6 +817,8 @@
 	//------------------------------
 	bool MeshLoader::end__mesh() 
 	{
+        mInMesh = false;
+
 		// The mesh will be written by the GeometyLoader. Therefore nothing to with the mesh here
 		finish();
 		return true;
@@ -908,7 +917,7 @@
 	bool MeshLoader::begin__polylist( const polylist__AttributeData& attributeData )
 	{
 		mCurrentPrimitiveType = POLYLIST;
-		COLLADAFW::Polygons* polygons = new COLLADAFW::Polygons();
+        COLLADAFW::Polygons* polygons = new COLLADAFW::Polygons(createUniqueId(COLLADAFW::Polygons::ID()));
 		polygons->getGroupedVerticesVertexCountArray().allocMemory((size_t)attributeData.count);
 		mCurrentMeshPrimitive = polygons;
 		if ( attributeData.material )
@@ -998,7 +1007,7 @@
 	bool MeshLoader::begin__polygons( const polygons__AttributeData& attributeData )
 	{
 		mCurrentPrimitiveType = POLYGONS;
-		COLLADAFW::Polygons* polygons = new COLLADAFW::Polygons();
+		COLLADAFW::Polygons* polygons = new COLLADAFW::Polygons(createUniqueId(COLLADAFW::Polygons::ID()));
 		// The actual size might be bigger, but its a lower bound
 		polygons->getGroupedVerticesVertexCountArray().allocMemory((size_t)attributeData.count);
 		mCurrentMeshPrimitive = polygons;
@@ -1074,7 +1083,7 @@
 	//------------------------------
 	bool MeshLoader::begin__tristrips( const tristrips__AttributeData& attributeData )
 	{
-		COLLADAFW::Tristrips* tristrips = new COLLADAFW::Tristrips();
+		COLLADAFW::Tristrips* tristrips = new COLLADAFW::Tristrips(createUniqueId(COLLADAFW::Tristrips::ID()));
 		// The actual size might be bigger, but its a lower bound
 		tristrips->getGroupedVerticesVertexCountArray().allocMemory((size_t)attributeData.count);
 		mCurrentMeshPrimitive = tristrips;
@@ -1108,7 +1117,7 @@
 	bool MeshLoader::begin__trifans( const trifans__AttributeData& attributeData )
 	{
 		mCurrentPrimitiveType = TRIFANS;
-		COLLADAFW::Trifans* trifans = new COLLADAFW::Trifans();
+		COLLADAFW::Trifans* trifans = new COLLADAFW::Trifans(createUniqueId(COLLADAFW::Trifans::ID()));
 		// The actual size might be bigger, but its a lower bound
 		trifans->getGroupedVerticesVertexCountArray().allocMemory((size_t)attributeData.count);
 		mCurrentMeshPrimitive = trifans;
@@ -1145,7 +1154,7 @@
 			{
 				loadSourceElements(mMeshPrimitiveInputs);
 				initializeOffsets();
-				mCurrentMeshPrimitive = new COLLADAFW::Triangles();
+				mCurrentMeshPrimitive = new COLLADAFW::Triangles(createUniqueId(COLLADAFW::Triangles::ID()));
 				if ( mCurrentCOLLADAPrimitiveCount > 0)
 				{
 					mCurrentMeshPrimitive->getPositionIndices().reallocMemory(mCurrentCOLLADAPrimitiveCount);
Index: src/COLLADASaxFWLNodeLoader.cpp
===================================================================
--- src/COLLADASaxFWLNodeLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLNodeLoader.cpp	(working copy)
@@ -31,13 +31,21 @@
 
 namespace COLLADASaxFWL
 {
+    const unsigned int NodeLoader::INSTANCE_CAMERA_BIT         = 1; //0x0000001
+    const unsigned int NodeLoader::INSTANCE_CONTROLLER_BIT     = 2; //0x0000010
+    const unsigned int NodeLoader::INSTANCE_GEOMETRY_BIT       = 4; //0x0000100
+    const unsigned int NodeLoader::INSTANCE_LIGHT_BIT          = 8; //0x0001000
+    const unsigned int NodeLoader::INSTANCE_NODE_BIT           = 16; //0x0010000
+    const unsigned int NodeLoader::BIND_MATERIAL_BIT           = 32; //0x0100000
+    const unsigned int NodeLoader::INSTANCE_MATERIAL_BIT       = 64; //0x1000000
 
+
 	NodeLoader::NodeLoader(  )
-		:
-		mCurrentInstanceWithMaterial(0),
-		mCurrentMaterialInfo(0),
-		mCurrentMaterialBinding(0),
-		mCurrentInstanceControllerData(0)
+		: mCurrentInstanceWithMaterial(0)
+        , mCurrentMaterialInfo(0)
+        , mCurrentMaterialBinding(0)
+        , mCurrentInstanceControllerData(0)
+        , mParsingStatus (0)
 	{
 	}
 
@@ -49,7 +57,7 @@
 	//------------------------------
 	bool NodeLoader::beginNode( const node__AttributeData& attributeData )
 	{
-		COLLADAFW::Node* newNode = new COLLADAFW::Node( getHandlingFilePartLoader()->getUniqueIdFromId(attributeData.id, COLLADAFW::Node::ID()));
+		COLLADAFW::Node* newNode = new COLLADAFW::Node( getHandlingFilePartLoader()->createUniqueIdFromId(attributeData.id, COLLADAFW::Node::ID()));
 
 		if ( attributeData.name )
 			newNode->setName ( (const char*)attributeData.name );
@@ -243,9 +251,11 @@
     //------------------------------
 	bool NodeLoader::begin__instance_geometry( const instance_geometry__AttributeData& attributeData )
 	{
+        mParsingStatus |= INSTANCE_GEOMETRY_BIT;
+
 		COLLADAFW::Node* currentNode = mNodeStack.top();
 
-		COLLADAFW::UniqueId instantiatedGeometryUniqueId = getHandlingFilePartLoader()->getUniqueIdFromUrl( attributeData.url, COLLADAFW::Geometry::ID());
+		COLLADAFW::UniqueId instantiatedGeometryUniqueId = getHandlingFilePartLoader()->createUniqueIdFromUrl( attributeData.url, COLLADAFW::Geometry::ID());
 		mCurrentMaterialInfo = &getHandlingFilePartLoader()->getMeshMaterialIdInfo(instantiatedGeometryUniqueId);
 
 		COLLADAFW::InstanceGeometry* instanceGeometry = new COLLADAFW::InstanceGeometry(instantiatedGeometryUniqueId);
@@ -259,19 +269,36 @@
 	//------------------------------
 	bool NodeLoader::end__instance_geometry()
 	{
+        mParsingStatus ^= INSTANCE_GEOMETRY_BIT;
+
 		endInstanceWithMaterial();
 		return true;
 	}
 
+    //------------------------------
+    bool NodeLoader::begin__bind_material ()
+    {
+        mParsingStatus |= BIND_MATERIAL_BIT;
+        return true;
+    }
 
+    //------------------------------
+    bool NodeLoader::end__bind_material ()
+    {
+        mParsingStatus ^= BIND_MATERIAL_BIT;
+        return true;
+    }
+
 	//------------------------------
 	bool NodeLoader::begin__instance_material( const instance_material__AttributeData& attributeData )
 	{
+        mParsingStatus |= INSTANCE_MATERIAL_BIT;
+
 		if ( !mCurrentInstanceWithMaterial )
 			return true;
 
 		COLLADAFW::MaterialId materialId = attributeData.symbol ? mCurrentMaterialInfo->getMaterialId((const char*)attributeData.symbol) : 0;
-		mCurrentMaterialBinding = new COLLADAFW::InstanceGeometry::MaterialBinding(materialId, getHandlingFilePartLoader()->getUniqueIdFromUrl(attributeData.target, COLLADAFW::Material::ID()));
+		mCurrentMaterialBinding = new COLLADAFW::InstanceGeometry::MaterialBinding(materialId, getHandlingFilePartLoader()->createUniqueIdFromUrl(attributeData.target, COLLADAFW::Material::ID()));
 
         if ( attributeData.symbol )
             mCurrentMaterialBinding->setName((const char*)attributeData.symbol);
@@ -282,7 +309,9 @@
 	//------------------------------
 	bool NodeLoader::end__instance_material()
 	{
-		if ( !mCurrentInstanceWithMaterial )
+        mParsingStatus ^= INSTANCE_MATERIAL_BIT;
+
+        if ( !mCurrentInstanceWithMaterial )
 			return true;
 
 		FilePartLoader::copyStlContainerToArray( mCurrentTextureCoordinateBindings, mCurrentMaterialBinding->getTextureCoordinateBindingArray());
@@ -309,8 +338,10 @@
 	//------------------------------
 	bool NodeLoader::begin__instance_node( const instance_node__AttributeData& attributeData )
 	{
+        mParsingStatus |= INSTANCE_NODE_BIT;
+
 		COLLADAFW::Node* currentNode = mNodeStack.top();
-		COLLADAFW::UniqueId instantiatedNodeUniqueId = getHandlingFilePartLoader()->getUniqueIdFromUrl( attributeData.url, COLLADAFW::Node::ID() );
+		COLLADAFW::UniqueId instantiatedNodeUniqueId = getHandlingFilePartLoader()->createUniqueIdFromUrl( attributeData.url, COLLADAFW::Node::ID() );
 
 		COLLADAFW::InstanceNode* instanceNode = FW_NEW COLLADAFW::InstanceNode(instantiatedNodeUniqueId);
 		currentNode->getInstanceNodes().append(instanceNode);
@@ -318,23 +349,43 @@
 		return true;
 	}
 
-	//------------------------------
+    //------------------------------
+    bool NodeLoader::end__instance_node ()
+    {
+        mParsingStatus ^= INSTANCE_NODE_BIT;
+
+        return true;
+    }
+    
+    //------------------------------
 	bool NodeLoader::begin__instance_camera( const instance_camera__AttributeData& attributeData )
 	{
-		COLLADAFW::Node* currentNode = mNodeStack.top();
-		COLLADAFW::UniqueId instantiatedCameraUniqueId = getHandlingFilePartLoader()->getUniqueIdFromUrl( attributeData.url, COLLADAFW::Camera::ID() );
+        mParsingStatus |= INSTANCE_CAMERA_BIT;
 
+        COLLADAFW::Node* currentNode = mNodeStack.top();
+		COLLADAFW::UniqueId instantiatedCameraUniqueId = getHandlingFilePartLoader()->createUniqueIdFromUrl( attributeData.url, COLLADAFW::Camera::ID() );
+
 		COLLADAFW::InstanceCamera* instanceCamera = FW_NEW COLLADAFW::InstanceCamera(instantiatedCameraUniqueId);
 		currentNode->getInstanceCameras().append(instanceCamera);
 
 		return true;
 	}
 
-	//------------------------------
+    //------------------------------
+    bool NodeLoader::end__instance_camera ()
+    {
+        mParsingStatus ^= INSTANCE_CAMERA_BIT;
+
+        return true;
+    }
+    
+    //------------------------------
 	bool NodeLoader::begin__instance_light( const instance_light__AttributeData& attributeData )
 	{
+        mParsingStatus |= INSTANCE_LIGHT_BIT;
+
 		COLLADAFW::Node* currentNode = mNodeStack.top();
-		COLLADAFW::UniqueId instantiatedLightUniqueId = getHandlingFilePartLoader()->getUniqueIdFromUrl( attributeData.url, COLLADAFW::Light::ID() );
+		COLLADAFW::UniqueId instantiatedLightUniqueId = getHandlingFilePartLoader()->createUniqueIdFromUrl( attributeData.url, COLLADAFW::Light::ID() );
 
 		COLLADAFW::InstanceLight* instanceLight = FW_NEW COLLADAFW::InstanceLight(instantiatedLightUniqueId);
 		currentNode->getInstanceLights().append(instanceLight);
@@ -342,11 +393,21 @@
 		return true;
 	}
 
+    //------------------------------
+    bool NodeLoader::end__instance_light ()
+    {
+        mParsingStatus ^= INSTANCE_LIGHT_BIT;
+
+        return true;
+    }
+
 	//------------------------------
 	bool NodeLoader::begin__instance_controller( const instance_controller__AttributeData& attributeData )
 	{
+        mParsingStatus |= INSTANCE_CONTROLLER_BIT;
+
 		COLLADAFW::Node* currentNode = mNodeStack.top();
-		COLLADAFW::UniqueId instantiatedControllerUniqueId = getHandlingFilePartLoader()->getUniqueIdFromUrl( attributeData.url, COLLADAFW::SkinControllerData::ID() );
+		COLLADAFW::UniqueId instantiatedControllerUniqueId = getHandlingFilePartLoader()->createUniqueIdFromUrl( attributeData.url, COLLADAFW::SkinControllerData::ID() );
 		mCurrentMaterialInfo = &getHandlingFilePartLoader()->getMeshMaterialIdInfo(instantiatedControllerUniqueId);
 
 		COLLADAFW::InstanceController* instanceController = FW_NEW COLLADAFW::InstanceController(instantiatedControllerUniqueId);
@@ -365,6 +426,8 @@
 	//------------------------------
 	bool NodeLoader::end__instance_controller()
 	{
+        mParsingStatus ^= INSTANCE_CONTROLLER_BIT;
+
 		endInstanceWithMaterial();
 		mCurrentInstanceControllerData = 0;
 		return true;
Index: src/COLLADASaxFWLPostProcessor.cpp
===================================================================
--- src/COLLADASaxFWLPostProcessor.cpp	(revision 684)
+++ src/COLLADASaxFWLPostProcessor.cpp	(working copy)
@@ -163,7 +163,7 @@
 				COLLADAFW::UniqueId animationListUniqueId = animatable->getAnimationList();
 				if ( !animationListUniqueId.isValid() )
 				{
-					animationListUniqueId = getUniqueId( COLLADAFW::AnimationList::ID() );
+					animationListUniqueId = createUniqueId( COLLADAFW::AnimationList::ID() );
 					animatable->setAnimationList( animationListUniqueId );
 				}
 				COLLADAFW::AnimationList*& animationList = getAnimationListByUniqueId(animationListUniqueId);
Index: src/COLLADASaxFWLRootParser14.cpp
===================================================================
--- src/COLLADASaxFWLRootParser14.cpp	(revision 684)
+++ src/COLLADASaxFWLRootParser14.cpp	(working copy)
@@ -11,6 +11,7 @@
 #include "COLLADASaxFWLStableHeaders.h"
 #include "COLLADASaxFWLRootParser14.h"
 #include "COLLADASaxFWLFileLoader.h"
+#include "COLLADASaxFWLIExtraDataCallbackHandler.h"
 
 #include "COLLADASaxFWLAssetLoader14.h"
 #include "COLLADASaxFWLSceneLoader14.h"
@@ -70,7 +71,7 @@
 
     //-----------------------------
     RootParser14::RootParser14( FileLoader* fileLoader )
-        : mFileLoader( fileLoader )
+        : mFileLoader ( fileLoader )
     {
     }
 
@@ -180,4 +181,14 @@
         SaxVirtualFunctionTest14(end__COLLADA());
         return true;
     }
+
+    //-----------------------------
+    bool RootParser14::begin__technique ( const COLLADASaxFWL14::technique__AttributeData& attributeData )
+    {
+        SaxVirtualFunctionTest14(begin__technique(attributeData));
+        technique__AttributeData attr;
+        attr.profile = attributeData.profile;
+        return root__begin__technique ( attr );
+    }
+
 }
Index: src/COLLADASaxFWLRootParser15.cpp
===================================================================
--- src/COLLADASaxFWLRootParser15.cpp	(revision 684)
+++ src/COLLADASaxFWLRootParser15.cpp	(working copy)
@@ -11,6 +11,7 @@
 #include "COLLADASaxFWLStableHeaders.h"
 #include "COLLADASaxFWLRootParser15.h"
 #include "COLLADASaxFWLFileLoader.h"
+#include "COLLADASaxFWLIExtraDataCallbackHandler.h"
 
 #include "COLLADASaxFWLAssetLoader15.h"
 #include "COLLADASaxFWLSceneLoader15.h"
@@ -74,7 +75,7 @@
 
     //-----------------------------
     RootParser15::RootParser15( FileLoader* fileLoader )
-        : mFileLoader( fileLoader )
+        : mFileLoader ( fileLoader )
     {
 
     }
@@ -218,4 +219,13 @@
         return true;
     }
 
+    //-----------------------------
+    bool RootParser15::begin__technique____technique_type ( const COLLADASaxFWL15::technique____technique_type__AttributeData& attributeData )
+    {
+        SaxVirtualFunctionTest15(begin__technique____technique_type(attributeData));
+        technique__AttributeData attr;
+        attr.profile = attributeData.profile;
+        return root__begin__technique ( attr );
+    }
+
 }
Index: src/COLLADASaxFWLSceneLoader.cpp
===================================================================
--- src/COLLADASaxFWLSceneLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLSceneLoader.cpp	(working copy)
@@ -34,7 +34,7 @@
     //------------------------------
     bool SceneLoader::begin__instance_visual_scene ( const instance_visual_scene__AttributeData& attributeData )
     {
-        COLLADAFW::UniqueId visualSceneUniqueId = getUniqueIdFromUrl( attributeData.url, COLLADAFW::VisualScene::ID() );
+        COLLADAFW::UniqueId visualSceneUniqueId = createUniqueIdFromUrl( attributeData.url, COLLADAFW::VisualScene::ID() );
         mCurrentScene->setInstanceVisualScene ( FW_NEW COLLADAFW::InstanceVisualScene(visualSceneUniqueId) );
 
         return true;
Index: src/COLLADASaxFWLVersionParser.cpp
===================================================================
--- src/COLLADASaxFWLVersionParser.cpp	(revision 684)
+++ src/COLLADASaxFWLVersionParser.cpp	(working copy)
@@ -434,7 +434,7 @@
         mFileLoader->setPrivateParser( mPrivateParser14 );
 
         //privateParser.setCallbackObject( &rootParser );
-		mPrivateParser14->registerUnknownElementHandler( &mFileLoader->mRawUnknownElementHandler );
+		mPrivateParser14->registerUnknownElementHandler( &mFileLoader->mExtraDataElementHandler );
 
         if ( !mFunctionMap14.empty() )
         {
@@ -457,7 +457,7 @@
         mFileLoader->setPrivateParser( mPrivateParser15 );
 
         //privateParser.setCallbackObject( &rootParser );
-		mPrivateParser15->registerUnknownElementHandler( &mFileLoader->mRawUnknownElementHandler );
+		mPrivateParser15->registerUnknownElementHandler( &mFileLoader->mExtraDataElementHandler );
 
         if ( !mFunctionMap15.empty() )
         {
Index: src/COLLADASaxFWLVisualSceneLoader.cpp
===================================================================
--- src/COLLADASaxFWLVisualSceneLoader.cpp	(revision 684)
+++ src/COLLADASaxFWLVisualSceneLoader.cpp	(working copy)
@@ -14,14 +14,16 @@
 
 #include "COLLADAFWVisualScene.h"
 #include "COLLADAFWIWriter.h"
+#include "COLLADAFWExtraKeys.h"
 
 
 namespace COLLADASaxFWL
 {
 
 	VisualSceneLoader::VisualSceneLoader( IFilePartLoader* callingFilePartLoader, const char* id )
-		: FilePartLoader(callingFilePartLoader),
-		mVisualScene(new COLLADAFW::VisualScene(getUniqueIdFromId(id, COLLADAFW::VisualScene::ID())))
+		: FilePartLoader(callingFilePartLoader)
+        , mVisualScene(new COLLADAFW::VisualScene(createUniqueIdFromId(id, COLLADAFW::VisualScene::ID())))
+        , mInNode (false)
 	{
 		NodeLoader::setHandlingFilePartLoader(this);
 	}
@@ -31,7 +33,68 @@
 	{
 	}
 
+    //------------------------------
+    COLLADAFW::ExtraData* VisualSceneLoader::getExtraData ()
+    {
+        return mVisualScene;
+    }
 
+    //------------------------------
+    const char* VisualSceneLoader::getSecondKey()
+    {
+        if ( !mInNode )
+        {
+            return COLLADAFW::ExtraKeys::VISUAL_SCENE;
+        }
+        else
+        {
+            if ( mParsingStatus & INSTANCE_CAMERA_BIT )
+            {
+                return COLLADAFW::ExtraKeys::INSTANCE_CAMERA;
+            }
+            else if ( mParsingStatus & INSTANCE_CONTROLLER_BIT )
+            {
+                if ( mParsingStatus & BIND_MATERIAL_BIT )
+                {
+                    if ( mParsingStatus & INSTANCE_MATERIAL_BIT )
+                        return COLLADAFW::ExtraKeys::INSTANCE_MATERIAL_CONTROLLER;
+                    else return COLLADAFW::ExtraKeys::BIND_MATERIAL_CONTROLLER;
+                }
+                else return COLLADAFW::ExtraKeys::INSTANCE_CONTROLLER;
+            }
+            else if ( mParsingStatus & INSTANCE_GEOMETRY_BIT )
+            {
+                if ( mParsingStatus & BIND_MATERIAL_BIT )
+                {
+                    if ( mParsingStatus & INSTANCE_MATERIAL_BIT )
+                        return COLLADAFW::ExtraKeys::INSTANCE_MATERIAL_GEOMETRY;
+                    else return COLLADAFW::ExtraKeys::BIND_MATERIAL_GEOMETRY;
+                }
+                else return COLLADAFW::ExtraKeys::INSTANCE_GEOMETRY;
+            }
+            else if ( mParsingStatus & INSTANCE_LIGHT_BIT )
+            {
+                return COLLADAFW::ExtraKeys::INSTANCE_LIGHT;
+            }
+            else if ( mParsingStatus & INSTANCE_NODE_BIT )
+            {
+                return COLLADAFW::ExtraKeys::INSTANCE_NODE;
+            }
+            else
+            {
+                return COLLADAFW::ExtraKeys::NODE;
+            }
+        }
+
+        return 0;
+    }
+
+    //------------------------------
+    const COLLADAFW::UniqueId& VisualSceneLoader::getUniqueId ()
+    {
+        return mVisualScene->getUniqueId ();
+    }
+
 	//------------------------------
 	void VisualSceneLoader::handleRootNode( COLLADAFW::Node* rootNode )
 	{
@@ -41,12 +104,14 @@
 	//------------------------------
 	bool VisualSceneLoader::begin__visual_scene__node( const node__AttributeData& attributeData )
 	{
+        mInNode = true;
 		return beginNode(attributeData);
 	}
 
 	//------------------------------
 	bool VisualSceneLoader::end__visual_scene__node()
 	{
+        mInNode = false;
 		return endNode();
 	}
 
@@ -60,10 +125,4 @@
 		return true;
 	}
 
-    //------------------------------
-    COLLADAFW::ExtraData* VisualSceneLoader::getExtraData ()
-    {
-        return mVisualScene;
-    }
-
 } // namespace COLLADASaxFWL
