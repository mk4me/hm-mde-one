cmake_minimum_required(VERSION 2.8)
project(EDR)
include("../../CMakeModules/Logic/ProjectUtils.cmake")

INITIALIZE_SOLUTION("KINEMATICLIB;EIGEN3;STDINT;BTK;LOG4CXX;ZLIB;BOOST;UTILS;OSG;OPENTHREADS;OSGUI;QT;TINYXML;OPENGL;DFMLIB;VDFMLIB;C3DLIB;QWT;FFMPEG;VIDLIB;CURL;WSDLPULL;WEBSERVICESLIB;QTHTMLGENLIB;SQLCIPHER;QUAZIP;TIMELINELIB")

set(EDRUTILS_INCLUDE_ROOT "${CMAKE_SOURCE_DIR}/../edrutils/include" CACHE PATH "EDR Utils include directory")
set(EDRUTILS_BUILD_ROOT "${PROJECT_BINARY_DIR}/../edrUtils" CACHE PATH "EDR Utils build directory")

CONFIG_OPTION(CORE_DISABLE_LOGGING "Disable logging?" OFF)
CONFIG_OPTION(CORE_ENABLE_LOG4CXX "Enable logging?" ON)
CONFIG_OPTION(CORE_ENABLE_LEAK_DETECTION "Enable leak detection?" OFF)

# projekt zasobów
set(PROJECT_SVN_RESOURCES_ROOT "${PROJECT_SOURCE_DIR}/resources" CACHE PATH "Location of resources being part of repository.")
option(PROJECT_ENABLE_SVN_RESOURCES "Enable svn resources?" ON)
if(PROJECT_ENABLE_SVN_RESOURCES)	
	add_subdirectory(${PROJECT_SVN_RESOURCES_ROOT} ${PROJECT_BINARY_DIR}/resources)
	install(DIRECTORY ${PROJECT_SVN_RESOURCES_ROOT}/deploy/ DESTINATION bin/resources/ COMPONENT core
		PATTERN ".svn" EXCLUDE
		PATTERN "CMakeLists.txt" EXCLUDE
		PATTERN "log.ini" EXCLUDE
		PATTERN "*.ts" EXCLUDE)
endif()

#---------------------------------------------------
# Dodatkowa konfiguracja CPack dla instalatora
set(CPACK_INSTALLER_RESOURCES "${PROJECT_SOURCE_DIR}/../../../installer_resources" CACHE PATH "Location of installer resources.")
set(CPACK_PROJECT_SVN_RESOURCES_ROOT ${PROJECT_SVN_RESOURCES_ROOT})
#---------------------------------------------------
# CPack
set(CPACK_PACKAGE_NAME "EDR")
set(CPACK_PACKAGE_FILE_NAME "EDR")
set(CPACK_NSIS_DISPLAY_NAME "EDR")
set(CPACK_NSIS_PACKAGE_NAME "EDR")
set(CPACK_PACKAGE_INSTALL_DIRECTORY "EDR")
set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "EDR")
set(CPACK_COMPONENT_NEWCOMMUNICATION_GROUP "Plugins")
set(CPACK_COMPONENT_SUBJECT_GROUP "Plugins")
set(CPACK_COMPONENT_VIDEO_GROUP "Plugins")
set(CPACK_COMPONENT_C3D_GROUP "Plugins")
set(CPACK_COMPONENT_NEWCHART_GROUP "Plugins")
set(CPACK_COMPONENT_NEWTIMELINE_GROUP "Plugins")
set(CPACK_COMPONENT_NEWCOMMUNICATION_DISPLAY_NAME "Communication plugin")
set(CPACK_COMPONENT_VIDEO_DISPLAY_NAME "Video plugin")
set(CPACK_COMPONENT_NEWCHART_DISPLAY_NAME "Chart plugin")
set(CPACK_COMPONENT_C3D_DISPLAY_NAME "c3d plugin")
set(CPACK_COMPONENT_NEWTIMELINE_DISPLAY_NAME "Timeline plugin")
set(CPACK_COMPONENT_SUBJECT_DISPLAY_NAME "Subject plugin")
set(CPACK_COMPONENT_CORE_DISPLAY_NAME "Main application")
set(CPACK_COMPONENT_CORE_REQUIRED ON)
set(CPACK_COMPONENTS_ALL newCommunication c3d core newChart video newtimeline kinematic subject)
option(ENABLE_CPACK "Set on to enable CPack" OFF)
option(ENABLE_CTEST "Set on to enable CTest" OFF)
if(ENABLE_CTEST)
	#wlaczamy CTest
	include(CTest)
endif()
if(ENABLE_CPACK) 
	#konfigurujemy cpacka w zaleznosci od systemu operacyjnego
	if(WIN32)
		set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}" ${CMAKE_MODULE_PATH})
		set(CMAKE_MODULE_PATH "${CPACK_INSTALLER_RESOURCES}" ${CMAKE_MODULE_PATH})
	else()
		set(CPACK_BINARY_DEB ON)
		set(CPACK_BINARY_RPM OFF)
		set(CPACK_BINARY_STGZ OFF)
		set(CPACK_BINARY_TBZ2 OFF)
		set(CPACK_BINARY_TGZ OFF)
		set(CPACK_BINARY_TZ OFF)
		set(CPACK_PACKAGE_CONTACT "PJWSTK")
	endif()
	include(CPack)
endif(ENABLE_CPACK)

FINALIZE_SOLUTION()
